:PROPERTIES:
:header-args: :comments both :tangle no :results silent :noweb yes
:header-args:org: :lexical t
:END:
#+Title: Doom Emacs Configuration
* Introduction
This is my [[https:github.com/doomemacs/doomemacs][Doom Emacs]] configuration it has taken heavy inspiration from multiple
sources and is now and will always be a work in progress.
** References
Some sources of inspiration (and more often than not direct plagiarism) are as follows:

- [[https:zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Zzamboni's Emacs Config]]
- [[https:tecosaur.github.io/emacs-config/config.html][Tecosaur’s Emacs config]]

I highly recommend checking out these and other examples of emacs configurations
(doomemacs or otherwise) as that's how I've learned all the best tips. Each
configuration is highly unique and some of the choices made here will be other
than what you would pick but it works for me so I'll take no judgment.

** File Layout
As this configuration is responsible for generating all my other emacs config
files it seems the most logical to get this out of the way early on. From this
configuration the following files are generated:

- =init.el=: Outlines what [[https:github.com/doomemacs/doomemacs/blob/develop/docs/getting_started.org#modules][doom modules]] will be enabled and other configuration
  that needs to occur early in the loading sequence, the majority of this can be
  found in the [[Doom Block]] section.
- =packages.el=: Outlines the packages to install and exactly how to install
  them when additional configuration is necessary.
- =config.el=: If it doesn't fit into the above categories than this is where
  it's gonna go typically is just the /general/ configuration.

Without any further preamble let's get to the configuration.
*** File Headers
To keep the headers of these files from cluttering the rest of this file they
are given here, they contain information that is automatically included when
installing doom and various other information about the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

#+RESULTS:

#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+RESULTS:

#+html: </details>

** Using Emacs Customize
[[https://github.com/doomemacs/doomemacs/blob/master/docs/faq.org#why-does-doom-discourage-the-use-of-m-x-customize][Doom does not recommend the Emacs =customize= mechanism:]]

All necessary settings are therefore set by hand as part of this configuration
file. The only exceptions are "safe variable" and "safe theme" settings, which
are automatically saved by Emacs in =custom.el=, but this is OK as they don't
conflict with anything else from the config.

* Modules
** Doom Block
This generates the ~doom!~ block of ~init.el~ which defines what should be
loaded into doom emacs. Currently I only rely on modules provided by doom itself
but any additions I may make will be described in their own section below the
doom block.
#+begin_src emacs-lisp :tangle init.el :lexical t
(setq doom-module-load-path
      '("/Users/carsonhenrich/.config/emacs/modules" "/Users/carsonhenrich/.config/doom/modules"))

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout                                     ; auie,ctsrnm is the superior home row

       :completion
       (corfu +dabbrev +icons +orderless)
       (vertico +icons)                             ; the search engine of the future
       ;;(company)                                  ; the ultimate code completion backend
       ;;helm                                       ; the *other* search engine for love and life
       ;;ido                                        ; the other *other* search engine...
       ;;ivy                                        ; a search engine for love and life

       :ui
       (popup +defaults)                            ; tame sudden yet inevitable temporary windows
       (treemacs +lsp)                              ; a project drawer, like neotree but cooler
       (vc-gutter +pretty)                          ; vcs diff in the fringe
       doom                                         ; what makes DOOM look the way it does
       doom-dashboard                               ; a nifty splash screen for Emacs
       doom-quit                                    ; DOOM quit-message prompts when you quit Emacs
       hl-todo                                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       minimap                                      ; show a map of the code on the side
       modeline                                     ; snazzy, Atom-inspired modeline, plus API
       nav-flash                                    ; blink cursor line after big motions
       ophints                                      ; highlight the region an operation acts on
       vi-tilde-fringe                              ; fringe tildes to mark beyond EOB
       window-select                                ; visually switch windows
       workspaces                                   ; tab emulation, persistence & separate workspaces
       zen                                          ; distraction-free coding or writing
       ;;unicode                                    ; extended unicode support for various languages
       ;;(ligatures +fira)                          ; ligatures or substitute text with pretty symbols
       ;;deft                                       ; notational velocity for Emacs
       ;;fill-column                                ; a `fill-column' indicator
       ;;hydra
       ;;indent-guides                              ; highlighted indent columns
       ;;neotree                                    ; a project drawer, like NERDTree for vim
       ;;tabs                                       ; a tab bar for Emacs

       :editor
       ;; meow
       (evil +everywhere)                           ; come to the dark side, we have cookies
       file-templates                               ; auto-snippets for empty files
       fold                                         ; (nigh) universal code folding
       format                                       ; automated prettiness
       multiple-cursors                             ; editing in many places at once
       parinfer                                     ; turn lisp into python, sort of
       rotate-text                                  ; cycle region at point between text candidates
       snippets                                     ; my elves. They type so I don't have to
       ;;god                                        ; run Emacs commands without modifier keys
       ;;lispy                                      ; vim for lisp, for people who don't like vim
       ;;objed                                      ; text object editing for the innocent
       ;;word-wrap                                    ; soft wrapping with language-aware indent

       :emacs
       dired                                        ; making dired pretty [functional]
       electric                                     ; smarter, keyword-based electric-indent
       ibuffer                                      ; interactive buffer management
       undo                                         ; persistent, smarter undo for your inevitable mistakes
       vc                                           ; version-control and Emacs, sitting in a tree

       :term
       eshell                                       ; the elisp shell that works everywhere
       vterm                                        ; the best terminal emulation in Emacs
       ;;shell                                      ; simple shell REPL for Emacs
       ;;term                                       ; basic terminal emulator for Emacs

       :checkers
       (spell +flyspell +hunspell)                  ; tasing you for misspelling mispelling
       (syntax +flymake)                            ; tasing you for every semicolon you forget
       grammar                                      ; tasing grammar mistake every you make

       :tools
       (:if (executable-find "ansible")
           (ansible))
       (:if (executable-find "docker")
           (docker +lsp))
       (:if (executable-find "git")                 ; a git porcelain for Emacs
           (magit +forge))
       (:if (executable-find "make")                ; run make tasks from Emacs
           (make))
       (:if (executable-find "pass")                ; password manager for nerds
           (pass +auth))
       (:if (executable-find "terraform")           ; infrastructure as code
           (terraform))
       (:if (executable-find "tmux")                ; an API for interacting with tmux
           (tmux))
       (eval +overlay)                              ; run code, run (also, repls)
       (lookup +dictionary +offline)                ; navigate your code and its documentation
       (lsp +peek +eglot)                           ; M-x vscode
       biblio                                       ; Writes a PhD for you (citation needed)
       debugger
       direnv
       pdf                                          ; pdf enhancements NOTE FOR MACOS https://github.com/politza/pdf-tools/issues/645#issuecomment-775496734
       tree-sitter                                  ; syntax and parsing, sitting in a tree...
       upload                                       ; map local to remote projects via ssh/ftp
       ;; (debugger +lsp)
       ;;collab                                     ; buffers with friends
       ;;editorconfig                               ; let someone else argue about tabs vs spaces
       ;;ein                                        ; tame Jupyter notebooks with emacs

       :os
       (:if IS-MAC macos)                           ; improve compatibility with macOS
       (tty +osc)                                   ; improve the terminal Emacs experience

       :lang
       (:if (executable-find "cargo")               ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
           (rust +tree-sitter +lsp))
       (:if (executable-find "kotlinc")             ; a better, slicker Java(Script)
           (kotlin +lsp))
       (:if (executable-find "nix")                 ; I hereby declare "nix geht mehr!"
           (nix +lsp +tree-sitter))
       (:if (executable-find "plantuml")            ; diagrams for confusing people more
           (plantuml))
       (:if (executable-find "go")                  ; the hipster dialect
           (go +tree-sitter +lsp))
       (cc +lsp)                                    ; C > C++ == 1
       (java +lsp)                                  ; the poster child for carpal tunnel syndrome
       (latex +latexmk +cdlatex +fold +lsp)         ; writing papers in Emacs has never been so fun
       (lua +lsp +tree-sitter)                      ; one-based indices? one-based indices
       (org +crypt +noter                           ; organize your plain life in plain text
            +present +pomodoro +roam2
            +dragndrop +pandoc)
       (python +tree-sitter +pyright +lsp)          ; beautiful is better than ugly
       (sh +lsp +fish +powershell)                  ; she sells {ba,z,fi}sh shells on the C xor
       data                                         ; config/data formats
       emacs-lisp                                   ; drown in parentheses
       javascript                                   ; all(hope(abandon(ye(who(enter(here))))))
       json                                         ; At least it ain't XML
       markdown                                     ; writing docs for people to ignore
       rest                                         ; Emacs as a REST client
       web                                          ; the tubes
       yaml                                         ; JSON, but readable
       ;;(dart +flutter)                            ; paint ui and not much else
       ;;(graphql +lsp)                             ; Give queries a REST
       ;;(haskell +lsp)                             ; a language that's lazier than I am
       ;;(ruby +rails)                              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(scheme +guile)                            ; a fully conniving family of lisps
       ;;agda                                       ; types of types of types of types...
       ;;beancount                                  ; mind the GAAP
       ;;clojure                                    ; java with a lisp
       ;;common-lisp                                ; if you've seen one lisp, you've seen them all
       ;;coq                                        ; proofs-as-programs
       ;;crystal                                    ; ruby at the speed of c
       ;;csharp                                     ; unity, .NET, and mono shenanigans
       ;;dhall
       ;;elixir                                     ; erlang done right
       ;;elm                                        ; care for a cup of TEA?
       ;;erlang                                     ; an elegant language for a more civilized age
       ;;ess                                        ; emacs speaks statistics
       ;;factor
       ;;faust                                      ; dsp, but you get to keep your soul
       ;;fortran                                    ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp                                     ; ML stands for Microsoft's Language
       ;;fstar                                      ; (dependent) types and (monadic) effects and Z3
       ;;gdscript                                   ; the language you waited for
       ;;hy                                         ; readability of scheme w/ speed of python
       ;;idris                                      ; a language you can depend on
       ;;julia                                      ; a better, faster MATLAB
       ;;lean                                       ; for folks with too much to prove
       ;;ledger                                     ; be audit you can be
       ;;nim                                        ; python + lisp at the speed of c
       ;;ocaml                                      ; an objective camel
       ;;php                                        ; perl's insecure younger brother
       ;;purescript                                 ; javascript, but functional
       ;;qt                                         ; the 'cutest' gui framework ever
       ;;racket                                     ; a DSL for DSLs
       ;;raku                                       ; the artist formerly known as perl6
       ;;rst                                        ; ReST in peace
       ;;scala                                      ; java, but good
       ;;sml
       ;;solidity                                   ; do you need a blockchain? No.
       ;;swift                                      ; who asked for emoji variables?
       ;;terra                                      ; Earth and Moon in alignment for performance.
       ;;zig                                        ; C, but simpler

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;(:if (executable-find "notmuch") (notmuch +org +afew))
       ;;(wanderlust +gmail)

       :app
       (rss +org)                                   ; emacs as an RSS reader
       calendar
       emms
       everywhere                                   ; *leave* Emacs!? You must be joking
       irc                                          ; how neckbeards socialize
       ;;twitter                                    ; twitter client https://twitter.com/vnought

       :config
       (default +smartparens
                +bindings)

       ;;literate


       :my_lang
       (org +roam +roam-ui +noter +pretty +query +present +hugo)
       :my_tools
       (:if (modulep! :email mu4e) mail))
#+end_src
** My_Lang
*** Org
**** Packages
Install packages required by this module according to other modules and flags set
#+begin_src emacs-lisp :tangle modules/my_lang/org/packages.el :lexical nil
;;; -*- no-byte-compile: t -*-

(package! ob-mermaid)
(package! engrave-faces)
(package! org-super-agenda)
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
(when (modulep! :lang kotlin) (package! ob-kotlin))


(when (modulep! +noter) (package! org-noter))
(when (modulep! +pretty) (package! org-modern))
(when (modulep! +roam) (package! org-roam))
(when (modulep! +present) (package! org-present))
(when (modulep! +hugo) (package! ox-hugo))
(when (modulep! +query)
  (package! org-ql)
  (when (modulep! +roam)
    (package! org-roam-ql)
    (package! org-roam-ql-ql)))
(when (modulep! +roam-ui)
  (package! org-roam-ui)
  (unpin! org-roam))
#+end_src

**** Checks
:PROPERTIES:
:header-args:emacs-lisp: :tangle modules/my_lang/org/doctor.el
:END:
#+begin_src emacs-lisp 
(when (and (modulep! +noter) (not (modulep! :lang org +noter))
  (warn! "The :my_lang org +noter flag is intended to be used with :lang org +noter, not doing so is undefined behavior")
#+end_src
#+begin_src emacs-lisp 
(when (and (modulep! +roam-ui) (not (modulep! +roam))
  (error! "You are using the roam-ui flag without the roam flag, this is undefined behavior")
#+end_src

**** Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle modules/my_lang/org/config.el
:END:
#+begin_src emacs-lisp 
;;; -*- lexical-binding: t -*-
#+end_src
***** Org
#+begin_src emacs-lisp
(use-package! org
  :defer t
  :init
  (setq org-directory (file-truename "~/org/"))
  (defvar ch/clock-map (make-sparse-keymap))
  (defvar ch/notes-map (make-sparse-keymap))
  (defvar ch/org-babel-map (make-sparse-keymap))
  (defvar ch/org-insert-map (make-sparse-keymap))
  :bind*
  (:map ch/org-insert-map
        ("x"     . org-dynamic-block-insert-dblock)
        ("d"     . org-insert-drawer)
        ("@"     . org-cite-insert)
        ("<"     . org-insert-structure-template)
        ("|"     . org-table-create-or-convert-from-region)
        ("l"     . org-insert-link)
        ("M-l"   . org-insert-last-stored-link)
        ("C-M-l" . org-insert-all-links)
        )
  (:map ch/clock-map
        ;; Timeclock
        ("e"   . org-clock-modify-effort-estimate)
        ("d"   . org-clock-display)
        ("j"   . org-clock-goto)
        ("C"   . org-clock-cancel)
        ("l"   . org-clock-in-last)
        ("i"   . org-clock-in)
        ("o"   . org-clock-out)
        ("r"   . org-resolve-clocks)
        ;; Timer
        ("-"    . org-timer-item)
        ("."    . org-timer)
        (","    . org-timer-pause-or-continue)
        (";"    . org-timer-set-timer)
        ("s"    . org-timer-start)
        ("S"    . org-timer-stop)
        )
  (:map ch/sexp-map
        ("o" . org-emphasize))
  (:map org-mode-map
        ("C-c C-,"       . nil)
        ("C-c ,"         . org-priority)
        ("C-c ^"         . org-sort)
        ("C-c $"         . org-archive-subtree)
        ("C-c :"         . org-toggle-fixed-width)
        ("C-c ;"         . org-toggle-comment)
        ("C-c C-t"       . org-todo)
        ("C-c C-t"       . org-todo)
        ("C-c C-q"       . org-set-tags-command)
        ("C-c C-w"       . org-refile)
        ("C-c C-h"       . org-set-property)
        ("C-c C-M-w"     . org-refile-reverse)
        ("C-c C-z"       . org-add-note)
        ("C-c C-a"       . org-attach)
        ("C-c C-e"       . org-export-dispatch)
        ("C-c C-s"       . org-schedule)
        ("C-c C-d"       . org-deadline)
        ("C-c ."         . org-time-stamp)
        ("C-c M-."       . org-time-stamp-inactive)
        ("C-c C-x C-s"   . org-archive-subtree)
        ("C-c C-x C-a"   . org-archive-subtree-default)
        ("C-c C-x C-e"   . org-set-effort)
        ("C-c C-x C-S-e" . org-encrypt-entry)
        ("C-c C-x C-S-d" . org-decrypt-entry)
        ("C-c C-x C-f"   . org-emphasize)
        ("C-c C-x C-b"   . org-toggle-checkbox)
        ("C-c C-x C-r"   . org-toggle-radio-button)
        ("C-c C-x C-e"   . org-todo)
        ("C-c C-x o"     . org-toggle-ordered-property)
        ("C-c C-x a"     . org-toggle-archive-tag)
        ("C-c C-x A"     . org-archive-to-archive-sibling)
        ("C-c C-x p"     . org-set-property)
        ("C-c C-x P"     . org-set-property-and-value)
        ("C-c C-x b"     . org-tree-to-indirect-buffer)
        ;; Heading Navigation
        ("C-c C-b"       . org-backward-heading-same-level)
        ("C-c C-f"       . org-forward-heading-same-level)
        ("C-c C-n"       . org-next-visible-heading)
        ("C-c C-p"       . org-previous-visible-heading)
        ("C-c C-P"       . org-up-element)
        ("C-c C-N"       . org-down-element)
        ;; Link Navigation
        ("C-c C-x C-n"   . org-next-link)
        ("C-c C-x C-p"   . org-previous-link)
        ;; Block Navigation
        ("C-c M-p"       . org-previous-block)
        ("C-c M-n"       . org-next-block))
  (:repeat-map org-mode-block-repeat-map
               ("p"     . org-previous-block)
               ("n"     . org-next-block))
  (:repeat-map org-mode-link-repeat-map
               ("n" . org-next-link)
               ("p" . org-previous-link))
  (:repeat-map org-mode-heading-repeat-map
               ("TAB"       . org-fold-show-children)
               ("S-TAB"     . org-shifttab)
               ("<backtab>" . org-shifttab)
               ("b"         . org-backward-heading-same-level)
               ("f"         . org-forward-heading-same-level)
               ("n"         . org-next-visible-heading)
               ("p"         . org-previous-visible-heading)
               ("P"         . org-up-element)
               ("N"         . org-down-element)
               )
  :custom
  (org-archive-location "./archive/%s_archive::")
  (org-return-follows-link t)
  (org-insert-heading-respect-content nil)
  (org-catch-invisible-edits 'show-and-error)
  (org-src-preserve-indentation t)
  ;; Appearance things
  (org-auto-align-tags t)
  (org-tags-column 0)
  (org-ellipsis "…")
  (org-cycle-inline-images-display t)
  (org-startup-with-latex-preview nil)
  (org-startup-with-inline-images nil)
  (org-startup-indented t)
  (org-startup-folded t)
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  ;; ID settings
  (org-id-method 'ts)
  :init
  (keymap-set mode-specific-map "n" ch/notes-map)
  (keymap-set ch/notes-map "c" ch/clock-map)
  :config
  (keymap-set org-mode-map "C-c C-S-i" ch/org-insert-map)
  (keymap-set org-mode-map "C-c C-v" ch/org-babel-map)
  ;; Setting up blocks to match the background
  (set-face-background 'org-block (face-background 'default))
  (set-face-background 'org-block-begin-line (face-background 'default))
  (set-face-background 'org-block-end-line (face-background 'default)) 
  (defvar org-agenda-directory (expand-file-name "agenda/" org-directory)
    "The Primary Directory in which to place agenda files")

(setq org-todo-keyword-faces
      '(("[-]" . +org-todo-active) ("NEXT" . +org-todo-active)
        ("[?]" . +org-todo-onhold) ("HOLD" . +org-todo-onhold)
        ("KILL" . +org-todo-cancel))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-targets
     '((nil . (:maxlevel . 3))
       (org-agenda-files . (:maxlevel . 3)))
      org-todo-keywords '((sequence "TODO(t)" "NEXT(n!/!)" "HOLD(h!/!)" "|" "DONE(d!)" "KILL(k!)")
                          (sequence "DRAFT(D)" "PENDING REVIEW(P!/!)" "|" "REVIEWED(R!/!)"))
      org-crypt-tag-matcher "CRYPT"
      ;; Change the priorities to numbers
      org-priority-highest ?A
      org-priority-default ?C
      org-priority-lowest  ?E
      ;; ascii values for 1-5
      org-priority-faces '((?A . error) (?B . warning) (?C . success) (?D . (:foreground "white" :weight "bold")) (?E . shadow))
      ;; Log for everything and log it into a drawer
      org-log-refile 'time
      org-log-done 'time
      org-log-reschedule 'time
      org-log-redeadline 'time
      org-log-done-with-time t
      org-log-note-clock-out nil
      org-log-into-drawer t
      org-agenda-files (directory-files-recursively org-agenda-directory "\\.org$")
      org-agenda-window-setup 'current-window
      org-agenda-skip-unavailable-files t
      org-agenda-inhibit-startup t)

(keymap-set mode-specific-map "\\" #'org-agenda)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-show-habits-only-for-today t)
(add-hook 'org-clock-in-hook #'org-save-all-org-buffers)
(add-hook 'org-clock-out-hook #'org-save-all-org-buffers)
(add-hook 'org-after-refile-insert-hook #'save-buffer)
  (add-hook #'auto-save-hook #'org-save-all-org-buffers))
#+end_src

Enable word count in modes listed in ~doom-modeline-continuous-word-count-modes~
#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count 't)
#+end_src

Allow for mixed pitch fonts in buffers
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(add-hook! 'org-mode-hook #'solaire-mode)
(setq mixed-pitch-variable-pitch-cursor nil)
#+end_src

Make sure certain org faces use the fixed-pitch face when ~variable-pitch-mode~ is on
#+begin_src emacs-lisp
(require 'org-faces)
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

(when (display-graphic-p)
  (require 'all-the-icons))
#+end_src

When using ~org-pomodoro~ I prefer to take my breaks manually rather than simply
having the timer start, to give me a chance to finish things up.
#+begin_src emacs-lisp
(when (modulep! :lang org +pomodoro) (setq org-pomodoro-manual-break 't))
#+end_src
****** Agenda
This is where configuration of general more task management and quick note
taking things takes place.
  
#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda
(defvar org-agenda-directory (expand-file-name "agenda/" org-directory)
    "The Primary Directory in which to place agenda files")

(setq org-todo-keyword-faces
      '(("[-]" . +org-todo-active) ("NEXT" . +org-todo-active)
        ("[?]" . +org-todo-onhold) ("HOLD" . +org-todo-onhold)
        ("KILL" . +org-todo-cancel))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-targets
     '((nil . (:maxlevel . 3))
       (org-agenda-files . (:maxlevel . 3)))
      org-todo-keywords '((sequence "TODO(t)" "NEXT(n!/!)" "HOLD(h!/!)" "|" "DONE(d!)" "KILL(k!)")
                          (sequence "DRAFT(D)" "PENDING REVIEW(P!/!)" "|" "REVIEWED(R!/!)"))
      org-crypt-tag-matcher "CRYPT"
      ;; Change the priorities to numbers
      org-priority-highest ?A
      org-priority-default ?C
      org-priority-lowest  ?E
      ;; ascii values for 1-5
      org-priority-faces '((?A . error) (?B . warning) (?C . success) (?D . (:foreground "white" :weight "bold")) (?E . shadow))
      ;; Log for everything and log it into a drawer
      org-log-refile 'time
      org-log-done 'time
      org-log-reschedule 'time
      org-log-redeadline 'time
      org-log-done-with-time t
      org-log-note-clock-out nil
      org-log-into-drawer t
      org-agenda-files (directory-files-recursively org-agenda-directory "\\.org$")
      org-agenda-window-setup 'current-window
      org-agenda-skip-unavailable-files t
      org-agenda-inhibit-startup t)

(keymap-set mode-specific-map "\\" #'org-agenda)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-show-habits-only-for-today t)
(add-hook 'org-clock-in-hook #'org-save-all-org-buffers)
(add-hook 'org-clock-out-hook #'org-save-all-org-buffers)
(add-hook 'org-after-refile-insert-hook #'save-buffer)
#+end_src

****** Capture
#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :bind (("C-c RET" . #'org-capture))
  :init
  (defun my/org-capture-file-work ()
    "The file in which to place work related notes and tasks"
    (expand-file-name "work.org" org-agenda-directory))

  (defvar my/org-capture-file-inbox (expand-file-name "inbox.org" org-agenda-directory)
    "My default inbox for org captures")
  
  (cl-defun my/org-capture-template-builder (&optional &key (keyword "") (tags "%^G") (props ":STYLE: note") (priority (concat "[#" (string org-default-priority) "]")) (title "%?") (body "%i"))
    "The base template used by task templates"
    (format "* %s %s %s %s\n:PROPERTIES:\n:CREATED: %%U\n%s\n:END:\n%s\n" keyword priority title tags props body))

  (defun my/org-capture-template-note (&optional tags)
    "The base template used by note templates"
    (if tags
	    (my/org-capture-template-builder :tags tags)
      (my/org-capture-template-builder)))
  
  (defun my/org-capture-template-task (&optional tags)
    "The base template used by task templates"
    (if tags
	    (my/org-capture-template-builder :keyword "TODO" :tags tags :props ":STYLE: task")
      (my/org-capture-template-builder :keyword "TODO" :props ":STYLE: task")))

  
  :config
  <<mu4e-capture>>
  :custom
  (org-capture-templates
   '(("c" "Clocked-in")
     ("cn" "Add note to Clocked-in"
      item (clock)
      "- Note taken on %U \\\\ %?")
     ("ct" "Add subtask to Clocked-in"
      entry (clock)
      #'my/org-capture-template-task
      :unnarrowed t)
     
     ("i" "Inbox")
     ("it" "Inbox Task"
      entry (file my/org-capture-file-inbox)
      #'my/org-capture-template-task)
     ("ic" "Clock-In Inbox Task"
      entry (file my/org-capture-file-inbox)
      #'my/org-capture-template-task
      :clock-keep 't
      :clock-in 't)
     ("in" "Inbox Note"
      entry (file my/org-capture-file-inbox)
      #'my/org-capture-template-note))))
#+end_src
***** Org-Super-Agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
  :after org
  :custom
  (org-agenda-category-icon-alist `(("inbox" ,(list (all-the-icons-faicon "inbox" :height 1.0)) nil nil :ascent center)
                                    ("finances" ,(list (all-the-icons-faicon "usd" :height 1.0)) nil nil :ascent center)
                                    ("calendar" ,(list (all-the-icons-faicon "calendar" :height 1.0)) nil nil :ascent center)
                                    ("school" ,(list (all-the-icons-faicon "graduation-cap" :height 1.0)) nil nil :ascent center)
                                    ("personal" ,(list (all-the-icons-faicon "user" :height 1.0)) nil nil :ascent center)
                                    ("trans" ,(list (all-the-icons-faicon "transgender" :height 1.0)) nil nil :ascent center)
                                    ("homelab" ,(list (all-the-icons-faicon "server" :height 1.0)) nil nil :ascent center)
                                    ("emacs" ,(list (all-the-icons-faicon "file-code-o" :height 1.0)) nil nil :ascent center)
                                    ("org" ,(list (all-the-icons-faicon "file-text" :height 1.0)) nil nil :ascent center)
                                    ("work" ,(list (all-the-icons-faicon "briefcase" :height 1.0)) nil nil :ascent center)
                                    ("career" ,(list (all-the-icons-faicon "building-o" :height 1.0)) nil nil :ascent center)))
  (org-agenda-prefix-format '((agenda . "%-4i %?-12t%-12s") (todo . "  %-5e %i") (tags . "%i") (search . "%i")))
  (org-agenda-custom-commands
   '(("a" "Agenda"
      ((agenda "" ((org-agenda-overriding-header "")
                   (org-agenda-include-diary t)
                   (org-deadline-warning-days 7)
                   (org-agenda-span 'day)
                   (org-super-agenda-groups
                    '((:name "Today"
                             :time-grid t)
                      (:name "Important"
                             :priority "1")
                      (:name "Personal"
                             :and (
                                   :not (:children todo)
                                   :tag "Personal"))
                      (:name "Projects"
                             :tag "PROJECT"
                             :order 3)
                      (:auto-outline-path t
                                          :order 4)))))))
     ("t" "Tasks"
      ((alltodo "" ((org-super-agenda-groups
                     '((:name "Inbox"
                              :file-path "*inbox.org")
                       (:name "Today"
                              :scheduled today
                              :deadline today)
                       (:discard (:habit t :todo "DONE" :todo "KILL" :not (:property ("STYLE" "task"))))
                       (:name "Important"
                              :priority "A"
                              :priority "B")
                       ;; (:auto-outline-path t :order 5)
                       (:name "HOLD"
                              :todo "HOLD"
                              :order 100)
                       (:name "Personal"
                              :tag "personal"
                              :order 1)
                       (:discard (:children todo))))))))))
  :config
  (org-super-agenda-mode)
  ;;  ensure the keymaps aren't different for the group header lines
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+end_src

***** Org-Noter
#+begin_src emacs-lisp :noweb yes
(use-package! org-noter
  :defer t
  :when (modulep! +noter)
  :init
  (map!
   :map org-mode-map
   :localleader
   :desc "Org noter"                   "N" #'org-noter
   :desc "Import Skeleton"             "S" #'org-noter-create-skeleton
   :desc "Goto Notes page"             ";" #'org-noter-sync-current-note
   :desc "Goto next notes page"        "j" #'org-noter-sync-prev-note
   :desc "Goto prev notes page"        "k" #'org-noter-sync-next-note
   :desc "Kill Noter"                  "K" #'org-noter-kill-session)
  (map!
   :when (modulep! :tools pdf)
   :map pdf-view-mode-map
   :localleader
   :desc "Noter"                       "n" #'org-noter
   :desc "Insert Note"                 "i" #'org-noter-insert-note
   :desc "Insert Skeleton"             "S" #'org-noter-create-skeleton
   :desc "Insert Precise Note"         "I" #'org-noter-insert-precise-note
   :desc "Kill Noter"                  "K" #'org-noter-kill-session
   :desc "Goto pages Notes"            ";" #'org-noter-sync-current-page-or-chapter
   :desc "Goto next page with notes"   "j" #'org-noter-sync-next-page-or-chapter
   :desc "Goto prev page with notes"   "k" #'org-noter-sync-prev-page-or-chapter)

  :config
  (setq org-noter-notes-search-path
      (mapcar (lambda (x) (expand-file-name x org-directory)) '("agenda" "notes" "pages")))
  (unless org-noter-notes-search-path
    (setq org-noter-notes-search-path (list org-directory)))
  (org-noter-enable-org-roam-integration)
  (org-noter-enable-update-renames))
#+end_src
***** Org-Modern
#+begin_src emacs-lisp :noweb yes
(use-package! org-modern
  :after org
  :when (modulep! +pretty)
  :config
  (global-org-modern-mode)
  (add-hook! org-agenda-finalize-hook #'org-modern-agenda)

  (setq org-modern-priority
        (quote ((?A . "")
                (?B . "")
                (?C . "")
                (?D . "")
                (?E . ""))))

  (setq org-modern-todo-faces
        (quote (("TODO" :background "tangerine" :foreground "white")
                ("NEXT" :background "maroon" :foreground "white")
                ("HOLD" :background "white" :foreground "orange")
                ("DONE" :background "black" :foreground "green")
                ("KILL" :background "black" :foreground "red")))))
#+end_src

***** Org-Roam-UI
#+begin_src emacs-lisp :noweb yes
(use-package! org-roam-ui
  :when (modulep! +roam-ui)
  :after org-roam ;; or :after org
  ;;  normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;  a hookable mode anymore, you're advised to pick something yourself
  ;;  if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src
***** Websocket
#+name:use_websocket
#+begin_src emacs-lisp :noweb yes
(use-package! websocket
    :when (modulep! +roam-ui)
    :after org-roam)
#+end_src
***** Org-ql
#+begin_src emacs-lisp
(use-package! org-ql
  :defer t
  :when (modulep! +query)
  :init
  (map!
   :leader
   :prefix ("n" . "notes")
   (:prefix ("q" . "query")
            :desc "Views"               "v" #'org-ql-view
            :desc "Find"                "f" #'org-ql-find
            :desc "Query Entries"       "q" #'org-ql-search)))
#+end_src

***** Org-roam-ql
#+begin_src emacs-lisp
(use-package! org-roam-ql
  :defer t
  :when (modulep! +query)
  :init
    (map!
     :map org-roam-ql-mode-map
     :desc "Query Dispatch" :n "q" #'org-roam-ql-buffer-dispatch)

    (map!
     :leader
     :prefix ("n" . "notes")
     :desc "Query Nodes"     "q" #'org-roam-ql-search))
#+end_src

***** Org-roam-ql-ql
#+begin_src emacs-lisp
(use-package! org-roam-ql-ql
  :when (modulep! +query)
  :defer t)
#+end_src

#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages

  #+end_src

***** Org-present
#+begin_src emacs-lisp :lexical t :noweb yes
(use-package! org-present
              :defer t
              :when (modulep! +present)
              :init
              (map!
               :map org-mode-map
               :i "SPC" 'nil
               :n "J" 'nil
               :niv "s-[" #'my/org-present-prev
               :niv "s-]" #'my/org-present-next)
              :config
              ;; Configure fill width
              (setq visual-fill-column-width 130
                    visual-fill-column-center-text t)

              (defun my/org-present-next (&optional ARG)
                (interactive)
                (unless ARG (setq ARG 1))
                (my/org-present-change-heading ARG))

              (defun my/org-present-prev (&optional ARG)
                (interactive)
                (if ARG (setq ARG (- ARG))(setq ARG -1))
                (my/org-present-change-heading ARG))

              (defun my/org-present-change-heading (ARG)
                (doom/widen-indirectly-narrowed-buffer)
                (org-next-visible-heading ARG)
                (org-narrow-to-subtree)
                (my/org-present-prepare-slide))

              (defun my/org-present-toggle-cursor ()
                (interactive)
                (if cursor-hidden (progn (org-present-show-cursor)
                                         (hl-line-mode 1)
                                         (setq cursor-hidden 'nil)
                                         (message "Cursor Shown"))
                  (progn (org-present-hide-cursor)
                         (hl-line-mode 0)
                         (setq cursor-hidden 't)
                         (message "Cursor Hidden"))))

              (defun my/org-present-start ()
                (display-line-numbers-mode 0)
                (hide-mode-line-mode 1)
                (mixed-pitch-mode 1)
                (flyspell-mode 0)
                (flycheck-mode 0)
                (writegood-mode 0)
                ;; Center the presentation and wrap lines
                (visual-fill-column-mode 1)
                (visual-line-mode 1)
                (org-present-show-cursor)
                ;; Set a blank header line string to create blank space at the top
                (setq header-line-format "")
                ;; Tweak font sizes
                (setq-local face-remapping-alist '((default (:height 1.3) variable-pitch)
                                                   (header-line (:height 3.7) variable-pitch)
                                                   (org-link (:height 1.3) org-drawer)
                                                   (org-document-title (:height 1.6) org-document-title)
                                                   (org-code (:height 1.25) org-code)
                                                   (org-table fixed-pitch shadow)
                                                   (org-verbatim (:height 1.3) org-verbatim)
                                                   (org-block (:height 1.1) org-block)
                                                   (org-block-begin-line (:height 0.7) org-block))))

              (defun my/org-present-end ()
                (display-line-numbers-mode 1)
                (mixed-pitch-mode 1)
                (hide-mode-line-mode 0)
                (flyspell-mode 1)
                (flycheck-mode 1)
                (writegood-mode 1)
                ;; Stop centering the document
                (visual-fill-column-mode 0)
                (visual-line-mode 0)
                (setq header-line-format 'nil)
                ;; Reset font customizations
                (setq-local face-remapping-alist '((default default default))))
              ;; Clear the header line format by setting to `nil'

              (defun my/org-present-prepare-slide ()
                ;; Show only top-level headlines
                (org-overview)

                ;; Unfold the current entry
                (org-show-entry)

                ;; Show only direct subheadings of the slide but don't expand them
                (org-show-children))

              (defun my/org-present-navigate (buffer-name heading)
                (my/org-present-prepare-slide))

              ;; Register hooks with org-present
              (add-hook 'org-present-after-navigate-functions 'my/org-present-navigate)
              (add-hook 'org-present-mode-hook 'my/org-present-start)
              (add-hook 'org-present-mode-quit-hook 'my/org-present-end))
#+end_src

***** Ox-hugo
#+begin_src emacs-lisp :noweb yes
(use-package! ox-hugo
              :when (modulep! +hugo)
              :after ox)
    #+end_src
*** TODO SQL
#+begin_src emacs-lisp :tangle packages.el
(package! sql-indent)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(add-hook 'sql-mode-hook 'lsp)
#+end_src
*** TODO Kotlin
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages 'org-babel-load-languages '((java . t)
                                                         (kotlin . t)))
#+end_src

** My_Tools
*** Mail
**** Checks
:PROPERTIES:
:header-args: :tangle modules/my_tools/mail/doctor.el :lexical t
:END:
Modules sanity checks run on ~doom doctor~
***** Doom Mail Module
#+begin_src emacs-lisp
(unless (modulep! :email mu4e)
  (warn! "Module my_tools/mu4e is expected to be run with Module email/mu4e, not doing so is undefined behavior"))
#+end_src
***** Mu Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "mu")
  (warn! "`mu` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src

***** Mbsync Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "mbsync")
  (warn! "`mbsync` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src
***** Msmtp Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "msmtp")
  (warn! "`msmtp` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src
**** Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle modules/my_tools/mail/config.el :noweb yes
:END:
***** Mu4e
#+begin_src emacs-lisp
(use-package! mu4e
  :commands (mu4e org-mu4e-open)
  :defer t
  :bind (:map ch/application-map
              ("m" . #'mu4e)
              :map mu4e-main-mode-map
              ("J" . #'mu4e-search-maildir)
              ("I" . #'mu4e-update-index)
              :map mu4e-headers-mode-map
              ("J" . #'mu4e-search-maildir)
              ("U" . #'mu4e-update-mail-and-index)
              ("I" . #'mu4e-update-index)
              ("m" . #'mu4e-headers-mark-for-something)
              ("M" . #'mu4e-headers-mark-for-move)
              ("X" . #'mu4e-mark-resolve-deferred-marks)
              :map mu4e-view-mode-map
              ("J" . #'mu4e-search-maildir)
              ("U" . #'mu4e-update-mail-and-index)
              ("I" . #'mu4e-update-index)
              ("m" . #'mu4e-view-mark-for-something)
              ("M" . #'mu4e-view-mark-for-move)
              ("X" . #'mu4e-mark-resolve-deferred-marks)
              )

  :init
  (defvar ch/mu4e-workspace-name "Mail"
    "The name of the workspace that mu4e will be started in")
  (defun ch/render-html-message ()
    (let ((dom (libxml-parse-html-region (point-min) (point-max))))
      (erase-buffer)
      (shr-insert-document dom)
      (goto-char (point-min))))
  (defvar ch/org-capture-email-tag "EMAIL"
    "Tag to be added to captures created from emails")
  :custom
  (mu4e-context-policy 'pick-first)
  (mu4e-mu-binary (executable-find "mu"))
  (org-mu4e-link-query-in-headers-mode nil)
  (mu4e-maildir "~/.maildir")
  (mu4e-notification-support t)
  (mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
  (mu4e-html2text-command 'ch/render-html-message)
  (mu4e-update-interval 300) ;; seconds
  (mu4e-attachment-dir "~/Desktop")
  (message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")
  (mu4e-headers-visible-lines 20)
  (mu4e-change-filenames-when-moving 't)
  (mu4e-split-view 'horizontal)
  (mu4e-index-cleanup t)
  (mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs)
  (mu4e-compose-context-policy 'ask) ;; ask for context if no context matches;
    (mail-user-agent 'mu4e-user-agent)
  (message-mail-user-agent 'mu4e-user-agent)
  (mu4e-headers-fields
        '((:account . 10)
          (:human-date . 12)
          (:flags . 6) ; 3 icon flags
          (:from-or-to . 25)
          (:subject)))
  (mu4e-use-fancy-chars t)
  
  :config
  (setq mu4e-headers-new-mark '("N". " 󱉲"))
  (setq mu4e-headers-draft-mark '("D". " "))
  (setq mu4e-headers-unread-mark '("u". " 󰇮"))
  (setq mu4e-headers-seen-mark '("S". " 󰇯"))
  (setq mu4e-headers-replied-mark '("R". " "))
  (setq mu4e-headers-passed-mark '("P". " "))
  (setq mu4e-headers-attach-mark '("a". " 󰁦"))
  (setq mu4e-headers-list-mark '("L". " "))
  (setq mu4e-headers-trashed-mark '("T". " "))
  (setq mu4e-headers-calendar-mark '("c". " "))
  (setq mu4e-headers-personal-mark '("p". " "))
  (setq mu4e-headers-signed-mark '("s". " 󰷼"))
  (setq mu4e-headers-encrypted-mark '("x". " 󰌋"))
  (setq mu4e-modeline-all-read '("R:" . " 󰇯"))
  (setq mu4e-modeline-all-clear '("C:" . " 󰚇"))
  (setq mu4e-modeline-new-items '("N:" . " 󱉲"))
  (setq mu4e-modeline-unread-items '("U:" . " 󰇮"))

  (persp-def-auto-persp ch/mu4e-workspace-name
                        :parameters '((dont-save-to-file . t))
                        :buffer-name (regexp-opt (list mu4e-main-buffer-name
                                                       mu4e-view-buffer-name
                                                       mu4e-embedded-buffer-name
                                                       mu4e-headers-buffer-name
                                                       mu4e--sexp-buffer-name
                                                       mu4e--log-buffer-name
                                                       mu4e-last-update-buffer))
                        :dyn-env '(after-switch-to-buffer-functions
                                   persp-add-buffer-on-find-file)
                        :hooks '(mu4e-main-mode-hook
                                 mu4e-headers-mode-hook
                                 mu4e-loading-mode-hook
                                 mu4e-org-mode-hook
                                 mu4e-view-mode-hook
                                 mu4e-thread-mode-hook
                                 mu4e-compose-mode-hook
                                 mu4e-modeline-mode-hook
                                 mu4e-raw-view-mode-hook
                                 mu4e--update-mail-mode-hook)
                        :switch 'window
                        :after-match
                        #'(lambda (state)
                            (define-advice mu4e (:override (args) ch/mu4e-persp-advice)
                              (persp-switch ch/mu4e-workspace-name))
                            (advise-once 'mu4e-quit :after-while
                                         #'(lambda (&rest args)
                                           (persp-kill ch/mu4e-workspace-name)
                                           (advice-remove 'mu4e 'mu4e@ch/mu4e-persp-advice)))
                            (persp-switch ch/mu4e-workspace-name)
                            state))

  (add-to-list 'meow-mode-state-list '(mu4e-view-mode . motion))

  <<mu4e-accounts>>
  <<mu4e-sending>>
;;  <<mu4e-hyperspace>>
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/html")
    (add-to-list 'mm-discouraged-alternatives "text/richtext")))
#+end_src
****** Accounts
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :noweb yes :results silent :lexical yes :comments noweb :noweb-ref mu4e-accounts
:END:

******* Address List

#+begin_src emacs-lisp
(setq mu4e-user-mail-address-list
      '("carson03henrich@gmail.com"
	"carson3henrich@gmail.com"
	"henricc5@wwu.edu"))
#+end_src

******* Bookmarks
#+begin_src emacs-lisp
(defvar ch/mu4e-inbox-folder nil)
(defvar ch/mu4e-important-folder nil)

(defun ch/set-mu4e-maildirs ()
  (setq mu4e-maildir-shortcuts
        (list (list :name "Inbox" :maildir ch/mu4e-inbox-folder :key ?i)
              (list :name "Important" :maildir ch/mu4e-important-folder :key ?j)
              (list :name "Sent" :maildir mu4e-sent-folder :key ?s)
              (list :name "Drafts" :maildir mu4e-drafts-folder :key ?d)
              (list :name "Archive" :maildir mu4e-refile-folder :key ?a))))

(add-hook 'mu4e-context-changed-hook #'ch/set-mu4e-maildirs)

(setq mu4e-bookmarks
      '((:name "Unread messages"           :query "flag:unread AND NOT flag:trashed AND NOT maildir:/Trash$/" :key ?u   :favorite t)
        (:name "Today's messages"          :query "date:today..now"                  :key ?t)
        (:name "Last 7 days"               :query "date:7d..now"                     :key ?w)
        (:name "Inboxes"                   :query "maildir:/Inbox$/"                 :key ?i)
        (:name "Flagged messages"          :query "flag:flagged"                     :key ?f)))
#+end_src
******* Contexts
#+begin_src emacs-lisp
(setq mu4e-contexts
      (list
       (make-mu4e-context
	:name "1_gmail"
	:match-func
	(lambda (msg)
	  (when msg (string-prefix-p "/gmail1" (mu4e-message-field msg :maildir))))
	:vars '((user-mail-address . "carson03henrich@gmail.com")
		(user-full-name . "Carson Henrich")
		(smtpmail-smtp-user "carson03henrich@gmail.com")
        (ch/mu4e-inbox-folder . "/gmail1/Inbox")
        (ch/mu4e-important-folder . "/gmail1/Important")
		(mu4e-drafts-folder . "/gmail1/Drafts")
		(mu4e-refile-folder . "/gmail1/Archive")
		(mu4e-sent-folder . "/gmail1/Sent")
		(mu4e-trash-folder . "/gmail1/Trash")))
       (make-mu4e-context
	:name "2_gmail"
	:match-func
	(lambda (msg)
	  (when msg (string-prefix-p "/gmail2" (mu4e-message-field msg :maildir))))
	:vars '((user-mail-address . "carson3henrich@gmail.com")
		(user-full-name . "Carson Henrich")
		(smtpmail-smtp-user "carson3henrich@gmail.com")
        (ch/mu4e-inbox-folder . "/gmail2/Inbox")
        (ch/mu4e-important-folder . "/gmail2/Important")
		(mu4e-drafts-folder . "/gmail2/Drafts")
		(mu4e-refile-folder . "/gmail2/Archive")
		(mu4e-sent-folder . "/gmail2/Sent")
		(mu4e-trash-folder . "/gmail2/Trash")))
       (make-mu4e-context
	:name "western"
	:match-func (lambda (msg)
                      (when msg (string-prefix-p "/school" (mu4e-message-field msg :maildir))))
	:vars '((user-mail-address . "henricc5@wwu.edu")
		(user-full-name . "Carson Henrich")
		(smtpmail-smtp-user "henricc5@wwu.edu")
        (ch/mu4e-inbox-folder . "/school/Inbox")
        (ch/mu4e-important-folder . "/school/Important")
		(mu4e-drafts-folder . "/school/Drafts")
		(mu4e-refile-folder . "/school/Archive")
		(mu4e-sent-folder . "/school/Sent")
		(mu4e-trash-folder . "/school/Trash")))))
#+end_src
****** Sending 
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :noweb yes :results silent :lexical yes :comments noweb :noweb-ref mu4e-accounts
:END:
#+begin_center
Hooks related to ~mu4e-compose-mode~ are set with a depth < 0 so that the will be
placed before the buffer is transitioned to ~OrgMsg~ otherwise they do not run
#+end_center

#+begin_src emacs-lisp
;; gpg encryptiom & decryption:
(require 'epa-file)
(epa-file-enable)
(setq epa-pinentry-mode 'loopback)

;; don't keep message compose buffers around after sending:
(setq message-kill-buffer-on-exit t)

;; send function:
(setq send-mail-function 'sendmail-send-it
      message-send-mail-function 'sendmail-send-it
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-sendmail-f-is-evil t)

;; send program:
(setq sendmail-program (executable-find "msmtp"))

;; select the right sender email from the context.
(setq mail-specify-envelope-from t
      message-sendmail-envelope-from 'header
      mail-envelope-from 'header)

;; mu4e cc & bcc
;; this is custom as well
(defun timu/add-cc-and-bcc ()
  "My Function to automatically add Cc & Bcc: headers.
    This is in the mu4e compose mode."
  (save-excursion (message-add-header "Cc:\n"))
  (save-excursion (message-add-header "Bcc:\n")))

(add-hook 'mu4e-compose-pre-hook #'org-msg-mode)
(add-hook 'mu4e-compose-mode-hook 'timu/add-cc-and-bcc -10)
(add-hook 'mu4e-compose-mode-hook (lambda () (flyspell-mode t)) -10)
(add-hook 'mu4e-compose-mode-hook (lambda () (auto-fill-mode t)) -10)
;; TODO (add-hook 'mu4e-compose-mode-hook (lambda () (writegood-mode t)) -10)

(defun my/mu4e-set-reply-sender ()
  "Select which of your particpating addresses in the previous message, that should
  be the sender of this reply."
  (save-excursion
    (when mu4e-compose-parent-message ;; Ensures this is a reply
      (let* ((participants (-filter
                         #'(lambda (rcv) (mu4e-personal-address-p (plist-get rcv :email)))
                         (append
                          (mu4e-message-field mu4e-compose-parent-message :to)
                          (mu4e-message-field mu4e-compose-parent-message :cc)
                          (mu4e-message-field mu4e-compose-parent-message :bcc)
                          (mu4e-message-field mu4e-compose-parent-message :from)))) ;; Allows for replying to yourself
             (participant (if (cdr participants)
                           (widget-choose "Select an Email to Reply from:"
                                          (mapcar (lambda (p) (cons (plist-get p :email) p)) participants))
                         (car participants)))
             (email (plist-get participant :email))
             (name (plist-get participant :name))
             (from-header (concat "From: " (message-make-from name email))))

        (when participant
          (message-remove-header "From")
          (message-add-header from-header))))))

(add-hook 'mu4e-compose-mode-hook 'my/mu4e-set-reply-sender -10)
#+end_src
****** Capture Emails to Agenda
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :noweb yes :results silent :lexical yes :comments noweb :noweb-ref mu4e-capture
:END:

Function for correctly storing a link to an email courtesy of [[https://stackoverflow.com/questions/17254967/using-org-capture-templates-with-mu4e][emacs - Using org-capture-templates with mu4e - Stack Overflow]]

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (defun org-mu4e-store-link ()
    "Store a link to a mu4e query or message."
    (cond
     ;; storing links to queries
     ((eq major-mode 'mu4e-headers-mode)
      (let* ((query (mu4e-last-query))
	         desc link)
	    (org-store-link-props :type "mu4e" :query query)
	    (setq
	     desc (concat "mu4e:query:" query)
	     link desc)
	    (org-add-link-props :link link :description desc)
	    link))
     ;; storing links to messages
     ((eq major-mode 'mu4e-view-mode)
      (let* ((msg  (mu4e-message-at-point))
	         (msgid   (or (plist-get msg :message-id) "<none>"))
	         (from (car (car (mu4e-message-field msg :from))))
	         (to (car (car (mu4e-message-field msg :to))))
	         (subject (mu4e-message-field msg :subject))
	         link)
	    (setq link (concat "mu4e:msgid:" msgid))
	    (org-store-link-props :type "mu4e" :link link
			                  :message-id msgid)
	    (setq link (concat "mu4e:msgid:" msgid))
	    (org-store-link-props
	     :type "mu4e" :from from :to to :subject subject
	     :message-id msgid)

	    (org-add-link-props :link link
			                :description (funcall org-mu4e-link-desc-func msg))
	    link))))

  (org-add-link-type "mu4e" 'org-mu4e-open)
  (add-hook 'org-store-link-functions 'org-mu4e-store-link))
#+end_src
#+begin_src emacs-lisp
 (with-eval-after-load 'org
   (defun my/org-capture-template-email (style)
     "The base template used by task templates"
     (my/org-capture-template-builder :keyword "TODO"
                                      :title "%a"
                                      :tags ":EMAIL:"
                                      :props (format ":FROM:  %%:from\n:TO:  %%:to\n:STYLE:  %s\n" style)))
   
   (dolist (template '(("e" "Email")
                       ("et" "Email Task"
			entry (file my/org-capture-file-inbox)
			(function (lambda () (my/org-capture-template-email "task"))))
                       ("en" "Email Note"
			entry (file my/org-capture-file-inbox)
			(function (lambda () (my/org-capture-template-email "note"))))))
     (add-to-list 'org-capture-templates template))
   (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "mu4e-headers-mode")(in-mode . "mu4e-view-mode")))))
#+end_src

***** Org-Msg
#+begin_src emacs-lisp 
(use-package! org-msg
              :after (org mu4e)
              :custom
              (org-msg-greeting-fmt "\nHi%s,\n\n")
              (org-msg-recipient-names 'nil)
              (org-msg-greeting-name-limit 3)
              (org-msg-default-alternatives '((new           . (text html))
                                              (reply-to-html . (text html))
                                              (reply-to-text . (text))))
              (org-msg-convert-citation t)
              (org-msg-signature
               "Cheers,\n\n#+begin_signature\n--\n*Carson Henrich*\n#+end_signature\n"))
#+end_src

*** TODO Magit
#+begin_src emacs-lisp :tangle config.el
(setq-default with-editor-emacsclient-executable "emacsclient")
#+end_src
*** TODO RSS
#+begin_src emacs-lisp :tangle config.el
(defun ime-elfeed-podcast-tagger (entry)
  (when (elfeed-entry-enclosures entry)
    (elfeed-tag entry 'media)))

(add-hook 'elfeed-new-entry-hook #'ime-elfeed-podcast-tagger)

(elfeed-org)
(after! org (setq rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory))))
#+end_src

*** TODO AI
**** Whisper
#+begin_src emacs-lisp :tangle yes
(after! whisper

  (defun rk/get-ffmpeg-device ()
    "Gets the list of devices available to ffmpeg.
The output of the ffmpeg command is pretty messy, e.g.
  [AVFoundation indev @ 0x7f867f004580] AVFoundation video devices:
  [AVFoundation indev @ 0x7f867f004580] [0] FaceTime HD Camera (Built-in)
  [AVFoundation indev @ 0x7f867f004580] AVFoundation audio devices:
  [AVFoundation indev @ 0x7f867f004580] [0] Cam Link 4K
  [AVFoundation indev @ 0x7f867f004580] [1] MacBook Pro Microphone
so we need to parse it to get the list of devices.
The return value contains two lists, one for video devices and one for audio devices.
Each list contains a list of cons cells, where the car is the device number and the cdr is the device name."
    (unless (string-equal system-type "darwin")
      (error "This function is currently only supported on macOS"))

    (let ((lines (string-split (shell-command-to-string "ffmpeg -list_devices true -f avfoundation -i dummy || true") "\n")))
      (cl-loop with at-video-devices = nil
               with at-audio-devices = nil
               with video-devices = nil
               with audio-devices = nil
               for line in lines
               when (string-match "AVFoundation video devices:" line)
               do (setq at-video-devices t
                        at-audio-devices nil)
               when (string-match "AVFoundation audio devices:" line)
               do (setq at-audio-devices t
                        at-video-devices nil)
               when (and at-video-devices
                         (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
               do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) video-devices)
               when (and at-audio-devices
                         (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
               do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) audio-devices)
               finally return (list (nreverse video-devices) (nreverse audio-devices)))))

 (defun rk/find-device-matching (string type)
   "Get the devices from `rk/get-ffmpeg-device' and look for a device
matching `STRING'. `TYPE' can be :video or :audio."
   (let* ((devices (rk/get-ffmpeg-device))
          (device-list (if (eq type :video)
                           (car devices)
                         (cadr devices))))
     (cl-loop for device in device-list
              when (string-match-p string (cdr device))
              return (car device))))

 (defcustom rk/default-audio-device nil
   "The default audio device to use for whisper.el and outher audio processes."
   :type 'string)

 (defun rk/select-default-audio-device (&optional device-name)
   "Interactively select an audio device to use for whisper.el and other audio processes.
If `DEVICE-NAME' is provided, it will be used instead of prompting the user."
   (interactive)
   (let* ((audio-devices (cadr (rk/get-ffmpeg-device)))
          (indexes (mapcar #'car audio-devices))
          (names (mapcar #'cdr audio-devices))
          (name (or device-name (completing-read "Select audio device: " names nil t))))
     (setq rk/default-audio-device (rk/find-device-matching name :audio))
     (when (boundp 'whisper--ffmpeg-input-device)
       (setq whisper--ffmpeg-input-device (format ":%s" rk/default-audio-device)))))

 (setq whisper-install-directory "/tmp/"
       whisper-model "base"
       whisper-language "en"
       whisper-translate nil
       whisper-use-threads (/ (num-processors) 2)))
#+end_src

**** Copilot
#+begin_src emacs-lisp :tangle yes
;; accept completion from copilot and fallback to corfu
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

** Editor
*** Meow
**** Packages
#+begin_src emacs-lisp :tangle modules/editor/meow/packages.el :lexical nil
(package! meow)
(package! key-chord)
#+end_src
**** Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle modules/editor/meow/config.el :noweb yes
:END:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

***** Meow
#+begin_src emacs-lisp  
(use-package! meow
  :init
  (defvar meow-empty-state-map (define-keymap)
    "An empty keymap for when we don't want meow to be getting in the way")

  (meow-define-state empty
    "An empty keymap for when we don't want meow to be getting in the way"
    :lighter " [E]"
    :keymap meow-empty-state-map
    (message ""))

  :custom
  (meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-use-clipboard t)
  :config
  (set-keymap-parent doom-leader-map mode-specific-map)
  (setcdr (assq 'leader meow-keymap-alist) doom-leader-map)
  (meow-global-mode 1)

  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))

  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("SPC" . "H-SPC")
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   ;; Easy access utilities
   '(";" . "M-x")
   '(":" . "M-:")
   '("," . switch-to-buffer)
   '("<" . ibuffer)
   '("." . find-file)
   '(">" . recentf)
   '("'" . bookmark-jump)
   '("\"" . bookmark-set)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("P" . yank-from-kill-ring)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
 #+end_src
****** Quick Escape
#+begin_src emacs-lisp
  (use-package! key-chord
    :after meow
    :config
    (key-chord-mode 1)
    (key-chord-define-global "jk" 'meow-escape-or-normal-modal))
#+end_src
****** Application Keymap
This is the keymap that I place what I call /Emacs Applications/ into, that
would be things like ~dired~, ~magit~, ~mu4e~, etc.

#+begin_src emacs-lisp
  (defvar ch/application-map (make-sparse-keymap)
    "The keymap that I place Emacs Applications into")

  (keymap-set global-map "C-c o" ch/application-map)
#+end_src

****** Toggle Keymap
This is the keymap that I place various toggles into, that would be things like
~line-number-mode~, ~auto-fill-mode~, ~flyspell-mode~, etc.

#+begin_src emacs-lisp
  (defvar ch/toggle-map (make-sparse-keymap)
    "The keymap that I place various toggles into")

  (keymap-set global-map "C-c t" ch/toggle-map)
#+end_src

* Temporary Fixes
Here is a place where I can place /temporary/ fixes to bugs that have cropped up
while using my configuration. I say that they are temporary because they are
typically a less than ideal solution for when I don't feel like going and
actually fixing the problem.
** Parinfer not building on x86 Macs
:PROPERTIES:
:CREATED:  [2024-07-22 Mon 19:37]
:END:
The library behind rust-parinfer recently had a change that caused it to stop
building for x86 macOS in the meantime I have built the library and placed it at
the path below.
#+begin_src emacs-lisp :tangle yes
(setq parinfer-rust-library "~/.config/doom/lib/libparinfer_rust.dylib.so")
#+end_src

* Packages
This is where packages not included in modules are placed to install them.
#+begin_src emacs-lisp :tangle packages.el
(package! leetcode)
(package! synosaurus)         ; thesuarus that doesn't get installed with lookup for some reason
(package! djvu)
(package! all-the-icons)
(package! nov)
(package! printing)
(package! spray
  :recipe (:host github :repo "emacsmirror/spray" :files ("*.el")))
(package! gptel)
(package! ellama)
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
(package! whisper
  :recipe (:host github :repo "natrys/whisper.el" :files ("*.el")))
#+end_src
* Configuration
** General
  #+begin_src emacs-lisp :tangle config.el :lexical t
(setq display-time-format "%Y-%m-%d %H:%M")

(setq auto-save-default t
      make-backup-files t)
(display-time-mode 1)
(auto-revert-mode 1)
(toggle-text-mode-auto-fill)

(require 'org-roam)
(require 'spray)
(require 'printing)
(toggle-frame-maximized)
#+end_src
*** User Information
  #+begin_src emacs-lisp :tangle config.el
(setq
        user-full-name "Carson Henrich"
        user-mail-address "carson03henrich@gmail.com")
#+end_src
** Appearance
*** 
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function.
#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'catppuccin)
#+end_src
*** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!
#+begin_src emacs-lisp :tangle config.el
;; Set reusable font name variables
(defvar my/fixed-width-font "Iosevka Nerd Font Mono"
  "The font to use for monospaced (fixed width) text.")

(defvar my/variable-width-font "Iosevka Aile"
  "The font to use for variable-pitch (document) text.")

(setq
    doom-unicode-font (font-spec :family my/fixed-width-font)
    doom-font (font-spec :family my/fixed-width-font :size 15 :weight 'light)
    doom-big-font (font-spec :family my/fixed-width-font :size 18 :weight 'light)
    doom-variable-pitch-font (font-spec :family my/variable-width-font :size 14 :weight 'light))
#+end_src
*** Syntax Highlighting
Need to set up treesitter such that it is used whenever it can be.
#+begin_src emacs-lisp :tangle config.el
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** Other
#+begin_src emacs-lisp :tangle config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Configure fill width
(setq visual-fill-column-center-text t)
(setq visual-fill-column-width 130)

;; Top breadcrumbs
(setq lsp-headerline-breadcrumb-enable 't)

;; Modeline
(setq mode-line-right-align-edge 'right-fringe)
(setq nerd-icons-scale-factor 1.0)
(setq doom-modeline-height 1)
#+end_src
** Tools
*** Vterm
#+begin_src emacs-lisp :tangle config.el
(setq vterm-shell "/etc/profiles/per-user/carsonhenrich/bin/fish")
#+end_src

*** Completion
#+begin_src emacs-lisp :tangle yes
(set-lookup-handlers! 'lsp-ui-doc-mode :documentation #'lsp-ui-doc-glance)
(after! corfu
   (setq corfu-preselect 'prompt)
   (add-hook 'completion-at-point-functions #'cape-file)
   (add-hook! org-mode (add-hook 'completion-at-point-functions #'cape-dict 0 't)))
#+end_src
*** Search
Add new search providers to the lookup list each entry has a name and a url with
a =%s= where the query will be expanded.
#+begin_src emacs-lisp :tangle config.el
(when (modulep! :lang nix)
  (setq +lookup-provider-url-alist (append +lookup-provider-url-alist '(
 ("Rust Crate Docs"  "https://docs.rs/releases/search?query=%s")
 ("Nix Options"  "https://search.nixos.org/options?type=options&query=%s")
 ("Nix Packages"  "https://search.nixos.org/packages?type=packages&query=%s")
 ("Noogle"  "https://noogle.dev/q?term=%s")
 ("Home-Manager Options"  "https://mipmip.github.io/home-manager-option-search/?query=%s")))))
#+end_src
*** Archive :ARCHIVE:
**** Leetcode
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:
#+begin_src emacs-lisp :tangle no
(setq leetcode-prefer-language "python3")
(setq leetcode-prefer-sql "mysql")
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/leetcode")
(add-hook 'leetcode-solution-mode-hook
          (lambda() (flycheck-mode -1)))
#+end_src
**** Khalel
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:
#+begin_src emacs-lisp :tangle no
(use-package! khalel
  :after org
  :config
  (khalel-add-capture-template))
(setq! khalel-import-org-file-header "
:PROPERTIES:
:ID:       58b06cd0-06cf-47c3-96d5-0d987c8c479d
:END:
,#+TITLE: Calendar

,#+COLUMNS: %ITEM %TIMESTAMP %LOCATION %CALENDAR

,*NOTE*: this file has been generated by [[elisp:(khalel-import-events)][khalel-import-events]] and /any changes to this document will be lost on the next import/!
Instead, use =khalel-edit-calendar-event= or =khal edit= to edit the underlying calendar entries, then re-import them here.

You can use [[elisp:(khalel-run-vdirsyncer)][khalel-run-vdirsyncer]] to synchronize with remote calendars.

Consider adding this file to your list of agenda files so that events show up there.
")

(setq khalel-khal-command (executable-find "khal"))
(setq khalel-capture-key "e")
(setq khalel-import-org-file (concat org-directory "/journal/calendar.org"))
(setq khalel-vdirsyncer-command (executable-find "vdirsyncer"))
(setq khalel-import-end-date "+90d")
(setq khalel-import-org-file-confirm-overwrite nil)

;; Integrate with email invitations
(require 'khalel-icalendar)
#+end_src

**** TODO Debugging
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:

* Keymaps
:PROPERTIES:
:header-args: :tangle keymaps.el :lexical t
:END:

#+begin_src emacs-lisp :tangle config.el
(when (modulep! :editor evil)
  (load! "keymaps"))
#+end_src

** Toggles
#+begin_src emacs-lisp
(map!
    (:leader "t" 'nil)
    (:leader :prefix ("t" . "Toggle")
        :desc "Big mode"                     "b" #'doom-big-font-mode
        (:after corfu
        :desc "Completion"                   "<tab>" #'global-corfu-mode)
        :desc "Fill Column Indicator"        "i" #'global-display-fill-column-indicator-mode
        :desc "Flymake"                      "S" #'flymake-mode
        :desc "Toggle Cursor"                "c" #'my/org-present-toggle-cursor
        :desc "Toggle Centered"              "C" #'visual-fill-column-mode
        :desc "Auto Format"                  "f" #'my/toggle-auto-format
        :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
        :desc "Evil goggles"                 "g" #'evil-goggles-mode
        :desc "Indent style"                 "I" #'doom/toggle-indent-style
        :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
        :desc "Read-only mode"               "r" #'read-only-mode
        :desc "Visible mode"                 "v" #'visible-mode
        :desc "Soft wrapping"                "w" #'global-visual-line-mode
        :desc "Soft wrapping (buffer)"       "W" #'visual-line-mode
        :desc "Autosave"                     "a" #'auto-save-visited-mode
        :desc "Autosave (buffer)"            "A" #'auto-save-mode
        :desc "Hard wrapping"                "h" #'toggle-text-mode-auto-fill
        :desc "Hard wrapping (buffer)"       "H" #'auto-fill-mode
        :desc "org-present mode"             "p" #'org-present
        (:when (modulep! :lang latex +cdlatex)
            :desc "Latex mode"                 "L" #'org-cdlatex-mode)
        (:when (and (modulep! :checkers syntax) (not (modulep! :checkers syntax +flymake)))
            :desc "Flycheck"                   "f" #'flycheck-mode)
        (:when (modulep! :ui indent-guides)
            :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
        (:when (modulep! :ui minimap)
            :desc "Minimap"                      "m" #'minimap-mode)
        (:when (and (modulep! :checkers spell) (not (modulep! :checkers spell +flyspell)))
            :desc "Spell checker"              "s" #'spell-fu-mode)
        (:when (modulep! :checkers spell +flyspell)
            :desc "Spell checker"              "s" #'flyspell-mode)
        (:when (modulep! :lang org +pomodoro)
            :desc "Pomodoro timer"             "t" #'org-pomodoro)
        (:when (modulep! :editor word-wrap)
            :desc "Fill Column Indicator"               "C" #'global-display-fill-column-indicator-mode
            :desc "Wrap at Fill-column"                 "c" '(lambda () (interactive)(if (eq +word-wrap-fill-style 'auto) (setq +word-wrap-fill-style 'nil)(setq +word-wrap-fill-style 'auto)))
            :desc "Soft wrapping"                       "w" #'+global-word-wrap-mode
            :desc "Soft wrapping (buffer)"              "W" #'+word-wrap-mode)
        (:when (modulep! :ui zen)
            :desc "Zen mode"                   "z" #'+zen/toggle
            :desc "Zen mode (fullscreen)"      "Z" #'+zen/toggle-fullscreen)))
#+end_src

** Tools
#+begin_src emacs-lisp
(map!
 (:after printing (:desc "Print" "s-p"   #'pr-interface))

(:map sql-mode-map
 :localleader
 :desc "SQL Connect to REPL"             "m" #'sql-connect
 :desc "Set SQL Product"                 "M" #'sql-set-product
 :desc "Execute Paragraph"               "p" #'lsp-sql-execute-paragraph
 :desc "Send Paragraph to REPL"          "P" #'sql-send-paragraph
 :desc "Send Buffer to REPL"             "b" #'sql-send-buffer
 :desc "Send String to REPL"             "q" #'sql-send-string
 :desc "Execute Region or Buffer"        "r" #'lsp-sql-execute-query
 :desc "Send Region to REPL"          :v "R" #'sql-send-region
 :desc "Toggle Goto After Send"          "t" #'sql-toggle-pop-to-buffer-after-send-region
 :desc "Switch Connection"               "c" #'lsp-sql-switch-connection
 :desc "Show Connections"                "C" #'lsp-sql-show-connections
 :desc "Switch Database"                 "d" #'lsp-sql-switch-database
 :desc "Show Databases"                  "D" #'lsp-sql-show-databases
 :desc "List Table"                      "l" #'sql-list-table
 :desc "List All"                        "L" #'sql-list-all)


   ;;; <leader> o --- open
 (:leader :prefix ("o" . "open")
  :desc "Default browser"    "b"  #'browse-url-of-file
  :desc "Start debugger"     "d"  #'+debugger/start
  :desc "New frame"          "w"  #'make-frame
  :desc "GPT"                "g"  #'gptel
  :desc "Select frame"       "W"  #'select-frame-by-name
  :desc "REPL"               "r"  #'+eval/open-repl-other-window
  :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
  :desc "Dired"              "-"  #'dired-jump
  :desc "Calc"              "c"  #'calc
  :desc "Org agenda"       "A"  #'org-agenda
  (:when (modulep! :tools pass)
    :desc "Pass"           "k" #'pass)
  (:when (modulep! :ui neotree)
    :desc "Project sidebar"              "p" #'+neotree/open
    :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
  (:when (modulep! :ui treemacs)
    :desc "Project sidebar" "p" #'+treemacs/toggle
    :desc "Find file in project sidebar" "P" #'treemacs-find-file)
  (:when (modulep! :term shell)
    :desc "Toggle shell popup"    "t" #'+shell/toggle
    :desc "Open shell here"       "T" #'+shell/here)
  (:when (modulep! :term term)
    :desc "Toggle terminal popup" "t" #'+term/toggle
    :desc "Open terminal here"    "T" #'+term/here)
  (:when (modulep! :term vterm)
    :desc "Toggle vterm popup"    "t" #'+vterm/toggle
    :desc "Open vterm here"       "T" #'+vterm/here)
  (:when (modulep! :term eshell)
    :desc "Toggle eshell popup"   "e" #'+eshell/toggle
    :desc "Open eshell here"      "E" #'+eshell/here)
  (:when (modulep! :os macos)
    :desc "Reveal in Finder"           "o" #'+macos/reveal-in-finder
    :desc "Reveal project in Finder"   "O" #'+macos/reveal-project-in-finder)
  (:when (modulep! :tools docker)
    :desc "Docker" "D" #'docker)
  (:when (modulep! :app calendar)
    :desc "Calendar" "C" #'=calendar)
  (:when (modulep! :app irc)
    :desc "IRC" "i" #'=irc)
  (:when (modulep! :app rss)
    :desc "RSS" "f" #'=rss)
  (:when (modulep! :email mu4e)
    :desc "Mu4e" "m" #'=mu4e
    :desc "Mu4e Compose" "M" #'+mu4e/compose)
  (:when (modulep! :email notmuch)
    :desc "notmuch" "m" #'=notmuch)
  (:when (modulep! :email wanderlust)
    :desc "wanderlust" "m" #'=wanderlust)))

(map! :leader
      :prefix ("l"."Language Models")
      (:after (fboundp 'copilot-mode)
       :desc "Complete" "<tab>" #'copilot-mode)
      (:when (fboundp 'whisper-run)
        :desc "Whisper" "w" #'whisper-run)
      (:when (fboundp 'ellama-chat)
        :desc "Chat" "e" #'ellama-chat
        :desc "Change" "C" #'ellama-change
        :desc "Provider Selection" "p" #'ellama-provider-select
        :desc "Define Word" "d" #'ellama-define-word
        :desc "Send Region/Buffer to chat" :nv "E" #'ellama-ask-selection
        :desc "Ask About Region/Buffer"   :nv "a" #'ellama-ask-about
        :desc "Summarize Region/Buffer"   :nv "S" #'ellama-summarize
        (:prefix ("s" . "session")
         :desc "Switch" "s" #'ellama-session-switch
         :desc "Load" "l" #'ellama-load-session
         :desc "Remove" "R" #'ellama-session-remove
         :desc "Rename" "r" #'ellama-session-rename)
        (:prefix ("i" . "improve")
         :desc "Grammar" "g" #'ellama-improve-grammar
         :desc "Wording" "w" #'ellama-improve-wording
         :desc "Conciseness" "c" #'ellama-improve-conciseness)
        (:prefix ("c" . "code")
         :desc "Complete" "<tab>" #'ellama-code-complete
         :desc "Improve" "i" #'ellama-code-improve
         :desc "Review" "r" #'ellama-code-review
         :desc "Edit" "e" #'ellama-code-edit
         :desc "Add" "a" #'ellama-code-add))

      (:when (modulep! :tools pdf)
        (:map pdf-view-mode-map
              (:localleader
               :desc "Center"                    "c" #'pdf-view-center-in-window
               :desc "Rotate"                    "r" #'pdf-view-rotate
               :desc "Recolor"                   "R" #'pdf-view-themed-minor-mode))))
#+end_src
