:PROPERTIES:
:header-args: :comments both :tangle no :results silent :noweb yes
:header-args:org: :lexical t
:END:
#+Title: Doom Emacs Configuration
* Introduction
This is my [[https:github.com/doomemacs/doomemacs][Doom Emacs]] configuration it has taken heavy inspiration from multiple
sources and is now and will always be a work in progress.
** References
Some sources of inspiration (and more often than not direct plagiarism) are as follows:

- [[https:zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Zzamboni's Emacs Config]]
- [[https:tecosaur.github.io/emacs-config/config.html][Tecosaurâ€™s Emacs config]]

I highly recommend checking out these and other examples of emacs configurations
(doomemacs or otherwise) as that's how I've learned all the best tips. Each
configuration is highly unique and some of the choices made here will be other
than what you would pick but it works for me so I'll take no judgment.

** File Layout
As this configuration is responsible for generating all my other emacs config
files it seems the most logical to get this out of the way early on. From this
configuration the following files are generated:

- =init.el=: Outlines what [[https:github.com/doomemacs/doomemacs/blob/develop/docs/getting_started.org#modules][doom modules]] will be enabled and other configuration
  that needs to occur early in the loading sequence, the majority of this can be
  found in the [[Doom Block]] section.
- =packages.el=: Outlines the packages to install and exactly how to install
  them when additional configuration is necessary.
- =config.el=: If it doesn't fit into the above categories than this is where
  it's gonna go typically is just the /general/ configuration.

Without any further preamble let's get to the configuration.
*** File Headers
To keep the headers of these files from cluttering the rest of this file they
are given here, they contain information that is automatically included when
installing doom and various other information about the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

#+RESULTS:

#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+RESULTS:

#+html: </details>

** Using Emacs Customize
[[https://github.com/doomemacs/doomemacs/blob/master/docs/faq.org#why-does-doom-discourage-the-use-of-m-x-customize][Doom does not recommend the Emacs =customize= mechanism:]]

All necessary settings are therefore set by hand as part of this configuration
file. The only exceptions are "safe variable" and "safe theme" settings, which
are automatically saved by Emacs in =custom.el=, but this is OK as they don't
conflict with anything else from the config.

* Modules
** Doom Block
This generates the ~doom!~ block of ~init.el~ which defines what should be
loaded into doom emacs. Currently I only rely on modules provided by doom itself
but any additions I may make will be described in their own section below the
doom block.
#+begin_src emacs-lisp :tangle init.el :lexical t
(setq doom-module-load-path
      '("/Users/carsonhenrich/.config/emacs/modules" "/Users/carsonhenrich/.config/doom/modules"))

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout                                     ; auie,ctsrnm is the superior home row

       :completion
       (corfu +dabbrev +icons +orderless)
       (vertico +icons)                             ; the search engine of the future
       ;;(company)                                  ; the ultimate code completion backend
       ;;helm                                       ; the *other* search engine for love and life
       ;;ido                                        ; the other *other* search engine...
       ;;ivy                                        ; a search engine for love and life

       :ui
       (popup +defaults)                            ; tame sudden yet inevitable temporary windows
       (treemacs +lsp)                              ; a project drawer, like neotree but cooler
       (vc-gutter +pretty)                          ; vcs diff in the fringe
       doom                                         ; what makes DOOM look the way it does
       doom-dashboard                               ; a nifty splash screen for Emacs
       doom-quit                                    ; DOOM quit-message prompts when you quit Emacs
       hl-todo                                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       minimap                                      ; show a map of the code on the side
       modeline                                     ; snazzy, Atom-inspired modeline, plus API
       nav-flash                                    ; blink cursor line after big motions
       ophints                                      ; highlight the region an operation acts on
       vi-tilde-fringe                              ; fringe tildes to mark beyond EOB
       window-select                                ; visually switch windows
       workspaces                                   ; tab emulation, persistence & separate workspaces
       zen                                          ; distraction-free coding or writing
       ;;unicode                                    ; extended unicode support for various languages
       ;;(ligatures +fira)                          ; ligatures or substitute text with pretty symbols
       ;;deft                                       ; notational velocity for Emacs
       ;;fill-column                                ; a `fill-column' indicator
       ;;hydra
       ;;indent-guides                              ; highlighted indent columns
       ;;neotree                                    ; a project drawer, like NERDTree for vim
       ;;tabs                                       ; a tab bar for Emacs

       :editor
       meow
       ;; (evil +everywhere)                           ; come to the dark side, we have cookies
       file-templates                               ; auto-snippets for empty files
       fold                                         ; (nigh) universal code folding
       format                                       ; automated prettiness
       multiple-cursors                             ; editing in many places at once
       parinfer                                     ; turn lisp into python, sort of
       rotate-text                                  ; cycle region at point between text candidates
       snippets                                     ; my elves. They type so I don't have to
       ;;god                                        ; run Emacs commands without modifier keys
       ;;lispy                                      ; vim for lisp, for people who don't like vim
       ;;objed                                      ; text object editing for the innocent
       ;;word-wrap                                    ; soft wrapping with language-aware indent

       :emacs
       dired                                        ; making dired pretty [functional]
       electric                                     ; smarter, keyword-based electric-indent
       ibuffer                                      ; interactive buffer management
       undo                                         ; persistent, smarter undo for your inevitable mistakes
       vc                                           ; version-control and Emacs, sitting in a tree

       :term
       eshell                                       ; the elisp shell that works everywhere
       vterm                                        ; the best terminal emulation in Emacs
       ;;shell                                      ; simple shell REPL for Emacs
       ;;term                                       ; basic terminal emulator for Emacs

       :checkers
       (spell +flyspell +hunspell)                  ; tasing you for misspelling mispelling
       (syntax +flymake)                            ; tasing you for every semicolon you forget
       grammar                                      ; tasing grammar mistake every you make

       :tools
       (:if (executable-find "ansible")
           (ansible))
       (:if (executable-find "docker")
           (docker +lsp))
       (:if (executable-find "git")                 ; a git porcelain for Emacs
           (magit +forge))
       (:if (executable-find "make")                ; run make tasks from Emacs
           (make))
       (:if (executable-find "pass")                ; password manager for nerds
           (pass +auth))
       (:if (executable-find "terraform")           ; infrastructure as code
           (terraform))
       (:if (executable-find "tmux")                ; an API for interacting with tmux
           (tmux))
       (eval +overlay)                              ; run code, run (also, repls)
       (lookup +dictionary +offline)                ; navigate your code and its documentation
       (lsp +peek)                                  ; M-x vscode
       biblio                                       ; Writes a PhD for you (citation needed)
       debugger
       direnv
       pdf                                          ; pdf enhancements NOTE FOR MACOS https://github.com/politza/pdf-tools/issues/645#issuecomment-775496734
       tree-sitter                                  ; syntax and parsing, sitting in a tree...
       upload                                       ; map local to remote projects via ssh/ftp
       ;; (debugger +lsp)
       ;;collab                                     ; buffers with friends
       ;;editorconfig                               ; let someone else argue about tabs vs spaces
       ;;ein                                        ; tame Jupyter notebooks with emacs

       :os
       (:if IS-MAC macos)                           ; improve compatibility with macOS
       (tty +osc)                                   ; improve the terminal Emacs experience

       :lang
       (:if (executable-find "cargo")               ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
           (rust +tree-sitter +lsp))
       (:if (executable-find "kotlinc")             ; a better, slicker Java(Script)
           (kotlin +lsp))
       (:if (executable-find "nix")                 ; I hereby declare "nix geht mehr!"
           (nix +lsp +tree-sitter))
       (:if (executable-find "plantuml")            ; diagrams for confusing people more
           (plantuml))
       (:if (executable-find "go")                  ; the hipster dialect
           (go +tree-sitter +lsp))
       (cc +lsp)                                    ; C > C++ == 1
       (java +lsp)                                  ; the poster child for carpal tunnel syndrome
       (latex +latexmk +cdlatex +fold +lsp)         ; writing papers in Emacs has never been so fun
       (lua +lsp +tree-sitter)                      ; one-based indices? one-based indices
       (org +crypt +noter                           ; organize your plain life in plain text
            +present +pomodoro +roam2
            +dragndrop +pandoc)
       (python +tree-sitter +pyright +lsp)          ; beautiful is better than ugly
       (sh +lsp +fish +powershell)                  ; she sells {ba,z,fi}sh shells on the C xor
       data                                         ; config/data formats
       emacs-lisp                                   ; drown in parentheses
       javascript                                   ; all(hope(abandon(ye(who(enter(here))))))
       json                                         ; At least it ain't XML
       markdown                                     ; writing docs for people to ignore
       rest                                         ; Emacs as a REST client
       web                                          ; the tubes
       yaml                                         ; JSON, but readable
       ;;(dart +flutter)                            ; paint ui and not much else
       ;;(graphql +lsp)                             ; Give queries a REST
       ;;(haskell +lsp)                             ; a language that's lazier than I am
       ;;(ruby +rails)                              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(scheme +guile)                            ; a fully conniving family of lisps
       ;;agda                                       ; types of types of types of types...
       ;;beancount                                  ; mind the GAAP
       ;;clojure                                    ; java with a lisp
       ;;common-lisp                                ; if you've seen one lisp, you've seen them all
       ;;coq                                        ; proofs-as-programs
       ;;crystal                                    ; ruby at the speed of c
       ;;csharp                                     ; unity, .NET, and mono shenanigans
       ;;dhall
       ;;elixir                                     ; erlang done right
       ;;elm                                        ; care for a cup of TEA?
       ;;erlang                                     ; an elegant language for a more civilized age
       ;;ess                                        ; emacs speaks statistics
       ;;factor
       ;;faust                                      ; dsp, but you get to keep your soul
       ;;fortran                                    ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp                                     ; ML stands for Microsoft's Language
       ;;fstar                                      ; (dependent) types and (monadic) effects and Z3
       ;;gdscript                                   ; the language you waited for
       ;;hy                                         ; readability of scheme w/ speed of python
       ;;idris                                      ; a language you can depend on
       ;;julia                                      ; a better, faster MATLAB
       ;;lean                                       ; for folks with too much to prove
       ;;ledger                                     ; be audit you can be
       ;;nim                                        ; python + lisp at the speed of c
       ;;ocaml                                      ; an objective camel
       ;;php                                        ; perl's insecure younger brother
       ;;purescript                                 ; javascript, but functional
       ;;qt                                         ; the 'cutest' gui framework ever
       ;;racket                                     ; a DSL for DSLs
       ;;raku                                       ; the artist formerly known as perl6
       ;;rst                                        ; ReST in peace
       ;;scala                                      ; java, but good
       ;;sml
       ;;solidity                                   ; do you need a blockchain? No.
       ;;swift                                      ; who asked for emoji variables?
       ;;terra                                      ; Earth and Moon in alignment for performance.
       ;;zig                                        ; C, but simpler

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;(:if (executable-find "notmuch") (notmuch +org +afew))
       ;;(wanderlust +gmail)

       :app
       (rss +org)                                   ; emacs as an RSS reader
       calendar
       emms
       everywhere                                   ; *leave* Emacs!? You must be joking
       irc                                          ; how neckbeards socialize
       ;;twitter                                    ; twitter client https://twitter.com/vnought

       :config
       (default +smartparens
                ;;   +evil-bindings +evil-bindings
                )
       ;;literate


       :my_lang
       (org +roam +roam-ui +noter +pretty +query +present +hugo)
       :my_tools
       (:if (modulep! :email mu4e) mail))
#+end_src
** Flag Loading Block

This code block is used in all modules to load in all files in ~./flags~ for which
the flag is enabled.
#+name: modules-load_flags
#+begin_src emacs-lisp
  (dolist (flag (doom-module-context-get :flags))
    (load! (concat "flags/" (substring (symbol-name flag) 1)) nil t))
#+end_src
** My_Lang
*** Org
**** Packages
Install packages required by this module according to other modules and flags set
#+begin_src emacs-lisp :tangle modules/my_lang/org/packages.el :lexical nil
;;; -*- no-byte-compile: t -*-

(package! ob-mermaid)
(package! engrave-faces)
(package! org-super-agenda)
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
(when (modulep! :lang kotlin) (package! ob-kotlin))

<<modules-my_lang-org-flag-packages>>
#+end_src

**** Configuration
#+begin_src emacs-lisp :tangle modules/my_lang/org/config.el
;;; -*- lexical-binding: t -*-

<<modules-my_lang-org-use-packages>>
<<modules-load_flags>>
#+end_src

***** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-use-packages
:END:
****** Org
#+begin_src emacs-lisp
(use-package! org
  :init
    <<org-keymaps>>
  :config
  <<org-config>>
  )
#+end_src
******* Config
:PROPERTIES:
:header-args:      :noweb-ref org-config
:END:
Some general org mode configuration
#+begin_src emacs-lisp
(setq
 org-directory (file-truename "~/org/")
 org-insert-heading-respect-content 't
 org-catch-invisible-edits 'show-and-error
 org-crypt-tag-matcher "CRYPT"
 org-attach-auto-tag nil)

(defvar org-agenda-directory (expand-file-name "agenda/" org-directory)
  "The Primary Directory in which to place agenda files")

(defvar org-weekly-directory (expand-file-name "weekly/" org-agenda-directory)
  "The Directory in which to place weekly agenda files")
#+end_src

Set some configuration for archiving org headings
#+begin_src emacs-lisp
(setq
 org-archive-mark-done 'nil
 org-archive-subtree-add-inherited-tags 't
 org-archive-location "./archive/%s.archive::")
#+end_src

Have emails that I create tasks out of go into ~email.org~
#+begin_src emacs-lisp
(when (modulep! :my_tools mail)
  (setq +org-capture-emails-file (expand-file-name  "email.org" org-agenda-directory)))
#+end_src

******** Appearance
Org styling, hide markup etc.
#+begin_src emacs-lisp
(setq
 org-auto-align-tags t
 org-tags-column 0
 org-ellipsis "â€¦"
 org-cycle-inline-images-display 't
 org-startup-with-latex-preview 't
 org-startup-folded 't
 org-hide-emphasis-markers t
 org-pretty-entities t)
#+end_src

Setup configuration for exporting highlighted code blocks
#+begin_src emacs-lisp
(setq org-latex-src-block-backend 'engraved
      org-latex-engraved-theme    't)
#+end_src

Enable word count in modes listed in ~doom-modeline-continuous-word-count-modes~
#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count 't)
#+end_src

Allow for mixed pitch fonts in buffers
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(add-hook! 'org-mode-hook #'solaire-mode)
(setq mixed-pitch-variable-pitch-cursor nil)
#+end_src

Make sure certain org faces use the fixed-pitch face when ~variable-pitch-mode~ is on
#+begin_src emacs-lisp
(require 'org-faces)
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

(when (display-graphic-p)
  (require 'all-the-icons))
#+end_src
******** Clock and Logging
Convenience function for selecting a clock to jump to
#+begin_src emacs-lisp
(defun my/org-clock-jumplist ()
  "Opens a buffer for you to decide which clock to go to"
  (interactive)
  (org-clock-goto 'select))
#+end_src

Save org buffers on auto save and on clocking in/out, this is mostly for syncing
purposes as without it I frequently forget to save buffers while taking notes.
#+begin_src emacs-lisp
(add-hook! #'auto-save-hook #'org-save-all-org-buffers)
(add-hook! #'org-clock-in-hook #'org-save-all-org-buffers)
(add-hook! #'org-clock-out-hook #'org-save-all-org-buffers)
 #+end_src

Setting up logging for org-mode tasks so that the time and change is logged for
refiles, reschedules, and done states.
#+begin_src emacs-lisp
(setq
 org-log-refile 'time
 org-log-done 'time
 org-log-reschedule 'time
 org-log-redeadline 'time
 org-log-done-with-time 't
 org-log-note-clock-out 'nil
 org-log-into-drawer 't)
#+end_src

Also log state changes for other keywords, speaking of which we are also
defining the keywords and the faces that should be used for them.
#+begin_src emacs-lisp
(require 'org-faces)
(setq
 org-todo-keywords
 '((sequence "TODO(t)" "NEXT(n!/!)" "HOLD(h!/!)" "|" "DONE(d!)" "KILL(k!)"))
 org-todo-keyword-faces
 '(("[-]" . +org-todo-active) ("NEXT" . +org-todo-active)
   ("[?]" . +org-todo-onhold) ("HOLD" . +org-todo-onhold)
   ("KILL" . +org-todo-cancel)))
#+end_src

When using ~org-pomodoro~ I prefer to take my breaks manually rather than simply
having the timer start, to give me a chance to finish things up.
#+begin_src emacs-lisp
(when (modulep! :lang org +pomodoro) (setq org-pomodoro-manual-break 't))
#+end_src

******** Agenda and Capture
Set some general configuration for the org agenda
#+begin_src emacs-lisp
(setq
 org-agenda-tags-column 0
 org-agenda-span 1
 org-deadline-warning-days 5
 org-agenda-block-separator ?â”€
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " â”„â”„â”„â”„â”„ " "â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„")
 org-agenda-current-time-string "â—€â”€â”€ now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
 org-agenda-inhibit-startup 'nil
 org-agenda-start-day 'nil)
#+end_src

Add in ~org-habit~ and only show todays habits in the agenda
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
(setq org-habit-show-habits-only-for-today t)
#+end_src

Set all files contained in ~org-agenda-directory~ as part of the org-agenda
#+begin_src emacs-lisp
(setq org-agenda-files (directory-files-recursively org-agenda-directory "\\.org$"))
#+end_src

Various functions for working with captures and timestamps
#+begin_src emacs-lisp
(defun my/org-time-stamp-inactive-with-time ()
  "Create an inactive timestamp with a time specifier"
  (interactive)
  (org-time-stamp-inactive 't))

(defun my/org-time-stamp-with-time ()
  "Create an active timestamp with a time specifier"
  (interactive)
  (org-time-stamp 't))

(defun my/org-update-reviewed ()
  "Create or update the `REVIEWED' property of the heading at point"
  (interactive)
  (org-set-property "REVIEWED" (format-time-string "%Y-%m-%d %H:%M:%S")))

(defun my/org-capture-add-created ()
  "Create or update the `CREATED' property of the heading at point"
  (interactive)
  (org-set-property "CREATED" (org-timestamp-translate (org-timestamp-from-time (current-time) 't 't))))

(defun my/org-capture-goto-project-notes-file ()
  "Goto the notes file for the current project"
  (interactive)
  (find-file (+org-capture-project-notes-file)))

(defun my/org-capture-week-file ()
  "Return the filename of the current capture week file creating it if it doesn't exist"
  (let ((filename
         (expand-file-name (format-time-string "%Y-W%W.org") org-weekly-directory)))
    (unless (f-exists? filename) (f-touch filename))
    filename))

(defun my/org-capture-goto-week-file ()
  "Goto the week file for the current week"
  (interactive)
  (find-file (my/org-capture-week-file)))

(defun my/org-capture-work-file ()
  "The file in which to place work related notes and tasks"
  (expand-file-name "work.org" org-agenda-directory))
#+end_src

Templates for ~org-mode~ captures for quick note taking
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("x" "Quick"
         entry (file my/org-capture-week-file)
         "* %i%? \n"
         :prepend 't
         :prepare-finalize my/org-capture-add-created)
        ("w" "Work"
         entry (file my/org-capture-work-file)
         "* %i%? :Work:\n"
         :prepend 't
         :prepare-finalize my/org-capture-add-created)
        ("r" "Review"
         entry (file my/org-capture-week-file)
         "* TODO Review %a%? :INBOX:Review:\n"
         :prepend 't
         :prepare-finalize my/org-capture-add-created
         :immediate-finish 't)
        ("c" "Clock-In New Task"
         entry (file my/org-capture-week-file)
         "* TODO %i%? \n"
         :prepend 't
         :prepare-finalize my/org-capture-add-created
         :clock-keep t
         :clock-in t)
        ("p" "Project-local")
        ("pt" "Project-local Todo"
         entry (file +org-capture-project-notes-file)
         "* TODO %? :INBOX:\n%i\n%a"
         :unnarrowed t)
        ("pn" "Project-local Notes"
         entry (file +org-capture-project-notes-file)
         "* %? :Notes:INBOX:\n%i\n%a"
         :unnarrowed t)
        ("pc" "Project-local Changelog"
         entry (file+olp +org-capture-project-notes-file)
         "* %? :Changelog:Unreleased:INBOX:\n%i\n%a"
         :unnarrowed t)))
#+end_src

Save all org buffers when entering or leaving the agenda
#+begin_src emacs-lisp
(add-hook! 'evil-org-agenda-mode-hook #'org-save-all-org-buffers)
#+end_src

******** Babel
Setup the default header args for code blocks end up cluttering my notes so I set that to silent and then by default allow for
using ~noweb~ syntax.
#+begin_src emacs-lisp
(setq org-babel-default-header-args
 '((:session . "none") (:results . "replace output") (:exports . "code") (:cache . "no")
   (:noweb . "yes") (:hlines . "no") (:tangle . "no")))
#+end_src

#+RESULTS:

******* Keymaps
:PROPERTIES:
:header-args:      :noweb-ref org-keymaps
:END:
Make switching between visible heading a bit easier
#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :desc "Move to Next Visible Heading"      :n "] h" #'org-next-visible-heading
 :desc "Move to Previous Visible Heading"  :n "[ h" #'org-previous-visible-heading)
#+end_src

Fix issue with snippets in org-mode
#+begin_src emacs-lisp
(map! :after evil-org
      :map evil-org-mode-map
      :i "C-n" #'yas-next-field
      :i "C-p" #'yas-prev-field)
#+end_src
I need to override what this is set to by doom emacs because it simply doesn't
make sense for my workflow.
#+begin_src emacs-lisp
(map!
 :after org
 :map org-mode-map
 :localleader
 :n "n" 'nil
 :desc "Add Note"                       :n "n" #'org-add-note)

(map!
 :map org-mode-map
 :localleader
 :desc "Update Reviewed"                :n "R" #'my/org-update-reviewed
 :desc "Add Created"                    :n "C" #'my/org-capture-add-created
 :desc "Decrypt"                        :n "D" #'org-decrypt-entry
 :desc "Encrypt"                        :n "E" #'org-encrypt-entry
 :desc "Remove Result"                  :n "u" #'org-babel-remove-result
 :desc "Remove Result Blocks"           :n "U" #'+org/remove-result-blocks
 :desc "Org export to clipboard"        :n "y" #'+org/export-to-clipboard
 :desc "Org export to clipboard as RTF" :n "Y" #'+org/export-to-clipboard-as-rich-text)
#+end_src

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix ("c" . "clock")
 :n "d" 'nil      ;; What these are mapped to by doom make no sense for my use-case
 :n "G" 'nil
 :desc "Clock Range Prev Day"          :n "-" #'org-clock-timestamps-up
 :desc "Clock Range Next Day"          :n "=" #'org-clock-timestamps-down
 :desc "Eval Time Range"               :n "t" #'org-evaluate-time-range
 :desc "Clock In"                      :n "i" #'org-clock-in
 :desc "Clock In"                      :n "i" #'org-clock-in
 :desc "Clock Out"                     :n "o" #'org-clock-out
 :desc "Clock In Last"                 :n "I" #'org-clock-in-last
 :desc "Modify Effort"                 :n "e" #'org-clock-modify-effort-estimate
 :desc "Set Effort"                    :n "E" #'org-set-effort
 :desc "Toggle last clock"             :n "l" #'+org/toggle-last-clock
 :desc "Resolve Timeclocks"            :n "r" #'org-resolve-clocks
 :desc "Time Report"                   :n "R" #'org-clock-report
 :desc "Goto Clock"                    :n "g" #'org-clock-goto
 :desc "Clock Jumplist"                :n "c" #'my/org-clock-jumplist
 :desc "Cancel Clock"                  :n "C" #'org-clock-cancel)
#+end_src

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix ("l" . "links")
 :desc "Insert roam link"                  :n "r" #'org-roam-node-insert)
#+end_src

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix  ("d" . "date")
 :desc "Deadline"                       :n "d" #'org-deadline
 :desc "Schedule"                       :n "s" #'org-schedule
 :desc "Active Timestamp"               :n "t" #'org-time-stamp
 :desc "Active Timestamp with Time"     :n "T" #'my/org-time-stamp-with-time
 :desc "Inactive Timestamp"             :n "i" #'org-time-stamp-inactive
 :desc "Inactive Timestamp with Time"   :n "I" #'my/org-time-stamp-inactive-with-time)
#+end_src

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix  ("s" . "subtree")
 :desc "Archive Subtree to Sibling"   :n "z" #'org-archive-to-archive-sibling)
#+end_src

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix ("p" . "priority")
 :desc "Priority Up"          :n "k" #'org-priority-up
 :desc "Priority Down"        :n "j" #'org-priority-down
 :desc "Set Priority"         :n "p" #'org-priority)
#+end_src

******** Global Org Mappings
#+begin_src emacs-lisp
(map!
 :leader
 :desc "Capture"             "x"   #'org-capture)
#+end_src
#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("n" . "notes")
 :desc "Find file in notes"           "f" #'+default/find-in-notes
 :desc "Browse notes"                 "F" #'+default/browse-notes
 :desc "Tags search"                  "m" #'org-tags-view
 :desc "Org capture"                  "n" #'org-capture
 :desc "Store Link"                  "l" #'org-store-link
 :desc "Goto capture"                 "N" #'org-capture-goto-target
 :desc "Active org-clock"             "o" #'org-clock-goto
 :desc "Todo list"                    "T" #'org-todo-list
 :desc "Search notes"                 "s" #'+default/org-notes-search
 :desc "Search org agenda headlines"  "S" #'+default/org-notes-headlines
 :desc "View search"                  "v" #'org-search-view
 :desc "Search notes for symbol"      "*" #'+default/search-notes-for-symbol-at-point
 :desc "Org agenda"                   "a" #'org-agenda
 :desc "Toggle last org-clock"        "C" #'+org/toggle-last-clock
 (:when (modulep! :tools biblio)
   :desc "Bibliographic notes"        "b"
   (cond ((modulep! :completion vertico)  #'citar-open-notes)
         ((modulep! :completion ivy)      #'ivy-bibtex)
         ((modulep! :completion helm)     #'helm-bibtex))))
#+end_src
#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("n" . "notes")
 (:prefix ("g". "goto")
  :desc "Last Refile"                :n "r" #'org-refile-goto-last-stored
  :desc "Last Capture"               :n "x" #'org-capture-goto-last-stored
  :desc "Clock"                      :n "c" #'org-clock-goto
  :desc "Weekly Agenda Note"         :n "g" #'my/org-capture-goto-week-file
  :desc "Project Notes"              :n "p" #'my/org-capture-goto-project-notes-file))
#+end_src
#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("n" . "notes")
 (:prefix ("c" . "clock")
  :desc "Clock In"                      :n "i" #'org-clock-in
  :desc "Clock Out"                     :n "o" #'org-clock-out
  :desc "Clock In Last"                 :n "I" #'org-clock-in-last
  :desc "Modify Effort"                 :n "e" #'org-clock-modify-effort-estimate
  :desc "Toggle last clock"             :n "l" #'+org/toggle-last-clock
  :desc "Resolve Timeclocks"            :n "r" #'org-resolve-clocks
  :desc "Time Report"                   :n "R" #'org-clock-report
  :desc "Goto Clock"                    :n "g" #'org-clock-goto
  :desc "Clock Jumplist"                :n "c" #'my/org-clock-jumplist
  :desc "Cancel Clock"                  :n "C" #'org-clock-cancel))
#+end_src

******** Org Agenda Mappings
#+begin_src emacs-lisp
(map! :leader
      :desc "My Agenda" :n "\\" #'my/org-agenda)
(map! :map org-agenda-mode-map
      :localleader
      :desc "Add Id" :n "I" #'my/org-agenda-id-get-create)
#+end_src

****** Org Super Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after
  org
  :config
  <<org-super-agenda-config>>
  )
#+end_src
******* Config
:PROPERTIES:
:header-args: :noweb-ref org-super-agenda-config
:END:
Make sure the ~org-super-agenda-groups~ get used and ensure the keymaps aren't
different for the group header lines.
#+begin_src emacs-lisp
(org-super-agenda-mode)
(setq org-super-agenda-header-map (make-sparse-keymap))
#+end_src

My default ~org-agenda~ command
#+begin_src emacs-lisp
(defun my/org-agenda ()
  "Open my default preset for org-agenda"
  (interactive)
  (org-agenda nil "n"))
#+end_src

Custom commands for displaying the agenda
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("n" "Today and TODOs"
         ((agenda "" ((org-agenda-overriding-header "")
                      (org-agenda-include-diary t)
                      (org-deadline-warning-days 7)
                      (org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t)
                         (:name "Important"
                          :priority "A")
                         (:name "Personal"
                          :and (
                                :not (:children todo)
                                :tag "Personal"))
                         (:name "Projects"
                          :tag "PROJECT"
                          :order 3)
                         (:auto-outline-path t
                          :order 4)))))


          (alltodo "" ((org-super-agenda-groups
                        '((:name "Inbox"
                           :tag "INBOX")
                          (:discard (:habit t :todo "DONE" :todo "KILL" :scheduled today :deadline today))
                          (:name "Important"
                           :priority "A")
                          (:auto-outline-path t :order 5)
                          (:name "HOLD" :and (:not (:tag "PROJECT") :todo "HOLD") :order 100)
                          (:name "Projects"
                           :and (:not (:children todo)
                                 :tag "PROJECT")
                           :order 4)
                          (:name "Personal"
                           :and (:not (:children todo)
                                 :tag "Personal")
                           :order 1)
                          (:discard (:children todo)))))))

         ((org-agenda-prefix-format '((agenda . "%i %?-12t%-12s") (todo . "  %-5e %i") (tags . "%i") (search . "%i")))))))
#+end_src

**** Flags
***** +pretty
~use-package!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/pretty.el :lexical t :noweb yes
;;;###if (modulep! +pretty)
<<modules-my_lang-org-pretty-config>>
<<modules-my_lang-org-pretty-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +pretty)
  (package! org-modern))
#+end_src
****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-pretty-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-pretty-use-packages
:END:
******* Org-Modern
#+begin_src emacs-lisp :noweb yes
(use-package! org-modern
  :init
  <<org-modern-keymaps>>
  :config
  <<org-modern-config>>)
#+end_src
******** Config
:PROPERTIES:
:header-args:      :noweb-ref org-modern-config
:END:
#+begin_src emacs-lisp
(global-org-modern-mode)
(add-hook! org-agenda-finalize-hook #'org-modern-agenda)
#+end_src
******** Keymaps
:PROPERTIES:
:header-args:      :noweb-ref org-modern-keymaps
:END:

***** +noter
~use-package!~ from in the  [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/noter.el :lexical t :noweb yes
;;;###if (modulep! +noter)
<<modules-my_lang-org-noter-config>>
<<modules-my_lang-org-noter-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +noter)
  (package! org-noter))
#+end_src

****** Checks
#+begin_src emacs-lisp :tangle modules/my_lang/org/doctor.el
(when (and (modulep! +noter) (not (modulep! :lang org +noter))
  (warn! "The :my_lang org +noter flag is intended to be used with :lang org +noter, not doing so is undefined behavior")
#+end_src
****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-noter-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-noter-use-packages
:END:
******* Org-Noter
#+begin_src emacs-lisp :noweb yes
(use-package! org-noter
  :defer t
  :init
  (list
    <<org-noter-keymaps>>
    )
  :config
  <<org-noter-config>>)
#+end_src
******** Config
:PROPERTIES:
:header-args:      :noweb-ref org-noter-config
:END:
#+begin_src emacs-lisp :results silent
(setq org-noter-notes-search-path
      (mapcar (lambda (x) (expand-file-name x org-directory)) '("agenda" "notes" "pages")))
(unless org-noter-notes-search-path
  (setq org-noter-notes-search-path (list org-directory)))
(org-noter-enable-org-roam-integration)
(org-noter-enable-update-renames)
#+end_src
******** Keymaps
:PROPERTIES:
:header-args:      :noweb-ref org-noter-keymaps
:END:
#+begin_src emacs-lisp :tangle no
(map!
 :map org-mode-map
 :localleader
 :desc "Org noter"                   "N" #'org-noter
 :desc "Import Skeleton"             "S" #'org-noter-create-skeleton
 :desc "Goto Notes page"             ";" #'org-noter-sync-current-note
 :desc "Goto next notes page"        "j" #'org-noter-sync-prev-note
 :desc "Goto prev notes page"        "k" #'org-noter-sync-next-note
 :desc "Kill Noter"                  "K" #'org-noter-kill-session)
#+end_src

#+begin_src emacs-lisp :tangle no
 (map!
  :when (modulep! :tools pdf)
  :map pdf-view-mode-map
  :localleader
  :desc "Noter"                       "n" #'org-noter
  :desc "Insert Note"                 "i" #'org-noter-insert-note
  :desc "Insert Skeleton"             "S" #'org-noter-create-skeleton
  :desc "Insert Precise Note"         "I" #'org-noter-insert-precise-note
  :desc "Kill Noter"                  "K" #'org-noter-kill-session
  :desc "Goto pages Notes"            ";" #'org-noter-sync-current-page-or-chapter
  :desc "Goto next page with notes"   "j" #'org-noter-sync-next-page-or-chapter
  :desc "Goto prev page with notes"   "k" #'org-noter-sync-prev-page-or-chapter)
#+end_src
***** +roam
~use-package!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/roam.el :lexical t :noweb yes
;;;###if (modulep! +roam)
<<modules-my_lang-org-roam-config>>
<<modules-my_lang-org-roam-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +roam)
  (package! org-roam))
  #+end_src

****** Checks
#+begin_src emacs-lisp :tangle modules/my_lang/org/doctor.el
(when (and (modulep! +roam) (not (modulep! :lang org +roam2))
  (warn! "The :my_lang org +roam flag is intended to be used with :lang org +roam2, not doing so is undefined behavior")
#+end_src
****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-roam-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-roam-use-packages
:END:
******* Org-Roam
#+begin_src emacs-lisp :noweb yes
(use-package! org-roam
  :after org
  :init
  (list
    <<org-roam-keymaps>>
    )
  :config
  <<org-roam-config>>)
#+end_src
******** Config
:PROPERTIES:
:header-args:      :noweb-ref org-roam-config
:END:
#+begin_src emacs-lisp
(setq org-roam-directory (expand-file-name org-directory "roam/")
      org-roam-db-update-on-save 't
      org-roam-extract-new-file-path "notes/%<%Y%m%d%H%M%S>-${slug}.org"
      org-roam-file-exclude-regexp (append (mapcar #'(lambda (x) (file-truename (expand-file-name x org-directory))) '(".Trash/" "data/" "logsec/")) (list org-attach-id-dir)))

(defun nom/org-roam-capture-create-id ()
  "Create id for captured note and add it to org-roam-capture-template."
  (when (and (not org-note-abort) (org-roam-capture-p))
    (org-roam-capture--put :id (org-id-get-create))))

(let ((noteHead "#+title: ${title}\n")
      (postHead "#+title: ${title}\n"))
  (setq org-roam-capture-templates
        (list
         (list "n" "Note" 'plain "* %i%?"
               :target (list 'file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org" noteHead)
               :empty-lines-before 1
               :unnarrowed 't))))

(add-hook 'org-capture-prepare-finalize-hook 'nom/org-roam-capture-create-id)
(require 'org-roam-export)
#+end_src
******** Keymaps
:PROPERTIES:
:header-args:      :noweb-ref org-roam-keymaps
:END:
#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :localleader
 :prefix ("m" . "roam")
 :desc "Extract Subtree"      "x" #'org-roam-extract-subtree)

(map!
 :leader
 :prefix ("n" . "notes")
 :desc "Find Node"                   "f" #'org-roam-node-find
 :desc "Capture Node"                "n" #'org-roam-capture
 (:prefix ("r" . "roam")
  :desc "Open random node"           "a" #'org-roam-node-random
  :desc "Find node"                  "f" #'org-roam-node-find
  :desc "Find ref"                   "F" #'org-roam-ref-find
  :desc "Show graph"                 "g" #'org-roam-graph
  :desc "Insert node"                "i" #'org-roam-node-insert
  :desc "Capture to node"            "n" #'org-roam-capture
  :desc "Toggle roam buffer"         "r" #'org-roam-buffer-toggle
  :desc "Launch roam buffer"         "R" #'org-roam-buffer-display-dedicated
  :desc "Sync database"              "s" #'org-roam-db-sync
  (:prefix ("d" . "by date")
   :desc "Goto previous note"        "b" #'org-roam-dailies-goto-previous-note
   :desc "Goto date"                 "d" #'org-roam-dailies-goto-date
   :desc "Capture date"              "D" #'org-roam-dailies-capture-date
   :desc "Goto next note"            "f" #'org-roam-dailies-goto-next-note
   :desc "Goto tomorrow"             "m" #'org-roam-dailies-goto-tomorrow
   :desc "Capture tomorrow"          "M" #'org-roam-dailies-capture-tomorrow
   :desc "Capture today"             "n" #'org-roam-dailies-capture-today
   :desc "Goto today"                "t" #'org-roam-dailies-goto-today
   :desc "Capture today"             "T" #'org-roam-dailies-capture-today
   :desc "Goto yesterday"            "y" #'org-roam-dailies-goto-yesterday
   :desc "Capture yesterday"         "Y" #'org-roam-dailies-capture-yesterday
   :desc "Find directory"            "-" #'org-roam-dailies-find-directory)))
#+end_src

***** +roam-ui
~use-package!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/roam-ui.el :lexical t :noweb yes
;;;###if (modulep! +roam-ui)
<<modules-my_lang-org-roam-ui-config>>
<<modules-my_lang-org-roam-ui-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +roam-ui)
  (package! org-roam-ui)
  (unpin! org-roam))
#+end_src

****** Checks
#+begin_src emacs-lisp :tangle modules/my_lang/org/doctor.el
(when (and (modulep! +roam-ui) (not (modulep! +roam))
  (error! "You are using the roam-ui flag without the roam flag, this is undefined behavior")
#+end_src
****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-roam-ui-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-roam-ui-use-packages
:END:
******* Org-Roam-UI
#+begin_src emacs-lisp :noweb yes
(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;  normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;  a hookable mode anymore, you're advised to pick something yourself
  ;;  if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :init
  (list
    <<org-roam-ui-keymaps>>
    )
  :config
  <<org-roam-ui-config>>)
#+end_src
******** Keymaps
:PROPERTIES:
:header-args: :noweb-ref org-roam-ui-keymaps
:END:
******** Config
:PROPERTIES:
:header-args: :noweb-ref org-roam-ui-config
:END:
#+begin_src emacs-lisp
(setq org-roam-ui-sync-theme t
      org-roam-ui-follow t
      org-roam-ui-update-on-save t
      org-roam-ui-open-on-start t)
#+end_src
******* Websocket
#+name:use_websocket
#+begin_src emacs-lisp :noweb yes
(use-package! websocket
    :after org-roam)
#+end_src
***** +query
~use-package!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/query.el :lexical t :noweb yes
;;;###if (modulep! +query)
<<modules-my_lang-org-query-config>>
<<modules-my_lang-org-query-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +query)
  (package! org-ql)
  (when (modulep! +roam)
    (package! org-roam-ql)
    (package! org-roam-ql-ql)))
  #+end_src

****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-query-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-query-use-packages
:END:
******* Org-ql
#+begin_src emacs-lisp
(use-package! org-ql
  :defer t
  :init
    <<org-ql-keymaps>>
    )
#+end_src
******** Config
:PROPERTIES:
:header-args: :noweb-ref org-ql-config
:END:
******** Keymaps
:PROPERTIES:
:header-args: :noweb-ref org-ql-keymaps
:END:
#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("n" . "notes")
 (:prefix ("q" . "query")
  :desc "Views"               "v" #'org-ql-view
  :desc "Find"                "f" #'org-ql-find
  :desc "Query Entries"       "q" #'org-ql-search))
#+end_src

******* Org-roam-ql
#+begin_src emacs-lisp
(use-package! org-roam-ql
  :defer t
  :init
    <<org-roam-ql-keymaps>>
    )
#+end_src
******** Keymaps
:PROPERTIES:
:header-args: :noweb-ref org-roam-ql-keymaps
:END:
#+begin_src emacs-lisp
(map!
 :map org-roam-ql-mode-map
 :desc "Query Dispatch" :n "q" #'org-roam-ql-buffer-dispatch)

(map!
 :leader
 :prefix ("n" . "notes")
 :desc "Query Nodes"     "q" #'org-roam-ql-search)
#+end_src

******* Org-roam-ql-ql
#+begin_src emacs-lisp
(use-package! org-roam-ql-ql
  :defer t)
#+end_src

***** +present
~use-package!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/present.el :lexical t :noweb yes
;;;###if (modulep! +present)
<<modules-my_lang-org-present-config>>
<<modules-my_lang-org-present-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +present)
  (package! org-present))
  #+end_src

****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-present-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-present-use-packages
:END:
******* Org-present
#+begin_src emacs-lisp :lexical t :noweb yes
(use-package! org-present
  :defer t
  :init
  (list
    <<org-present-keymaps>>
    )
  :config
  <<org-present-config>>)
#+end_src
******** Config
:PROPERTIES:
:header-args: :noweb-ref org-present-config
:END:
#+begin_src emacs-lisp
;; Configure fill width
(setq visual-fill-column-width 130
      visual-fill-column-center-text t)

(defun my/org-present-next (&optional ARG)
  (interactive)
  (unless ARG (setq ARG 1))
  (my/org-present-change-heading ARG))

(defun my/org-present-prev (&optional ARG)
  (interactive)
  (if ARG (setq ARG (- ARG))(setq ARG -1))
  (my/org-present-change-heading ARG))

(defun my/org-present-change-heading (ARG)
  (doom/widen-indirectly-narrowed-buffer)
  (org-next-visible-heading ARG)
  (org-narrow-to-subtree)
  (my/org-present-prepare-slide))

(defun my/org-present-toggle-cursor ()
  (interactive)
  (if cursor-hidden (progn (org-present-show-cursor)
                           (hl-line-mode 1)
                           (setq cursor-hidden 'nil)
                           (message "Cursor Shown"))
    (progn (org-present-hide-cursor)
           (hl-line-mode 0)
           (setq cursor-hidden 't)
           (message "Cursor Hidden"))))

(defun my/org-present-start ()
  (display-line-numbers-mode 0)
  (hide-mode-line-mode 1)
  (mixed-pitch-mode 1)
  (flyspell-mode 0)
  (flycheck-mode 0)
  (writegood-mode 0)
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1)
  (org-present-show-cursor)
  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format "")
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.3) variable-pitch)
                                     (header-line (:height 3.7) variable-pitch)
                                     (org-link (:height 1.3) org-drawer)
                                     (org-document-title (:height 1.6) org-document-title)
                                     (org-code (:height 1.25) org-code)
                                     (org-table fixed-pitch shadow)
                                     (org-verbatim (:height 1.3) org-verbatim)
                                     (org-block (:height 1.1) org-block)
                                     (org-block-begin-line (:height 0.7) org-block))))

(defun my/org-present-end ()
  (display-line-numbers-mode 1)
  (mixed-pitch-mode 1)
  (hide-mode-line-mode 0)
  (flyspell-mode 1)
  (flycheck-mode 1)
  (writegood-mode 1)
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0)
  (setq header-line-format 'nil)
  ;; Reset font customizations
  (setq-local face-remapping-alist '((default default default))))
;; Clear the header line format by setting to `nil'

(defun my/org-present-prepare-slide ()
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-navigate (buffer-name heading)
  (my/org-present-prepare-slide))

;; Register hooks with org-present
(add-hook 'org-present-after-navigate-functions 'my/org-present-navigate)
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
#+end_src
******** Keymaps
:PROPERTIES:
:header-args: :noweb-ref org-present-keymaps
:END:
#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :i "SPC" 'nil
 :n "J" 'nil
 :niv "s-[" #'my/org-present-prev
 :niv "s-]" #'my/org-present-next)
#+end_src

***** +hugo
~use-packages!~ from in the [[Use Packages]] section and other general flag [[Config]]
#+begin_src emacs-lisp :tangle modules/my_lang/org/flags/hugo.el :lexical t :noweb yes
;;;###if (modulep! +hugo)
<<modules-my_lang-org-hugo-config>>
<<modules-my_lang-org-hugo-use-packages>>
#+end_src

Packages included with this flag
#+begin_src emacs-lisp :noweb-ref modules-my_lang-org-flag-packages
(when (modulep! +hugo)
  (package! ox-hugo))
#+end_src

****** Config
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-hugo-config
:END:
****** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_lang-org-hugo-use-packages
:END:

******* Ox-hugo
#+begin_src emacs-lisp :noweb yes
(use-package! ox-hugo
  :after ox
  :init
  (list
    <<ox-hugo-keymaps>>
    )
  :config
  <<ox-hugo-config>>)
    #+end_src
******** Config
:PROPERTIES:
:header-args: :noweb-ref ox-hugo-config
:END:
******** Keymaps
:PROPERTIES:
:header-args: :noweb-ref ox-hugo-keymaps
:END:
***** Archive :ARCHIVE:
****** TODO NotDeft
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-19 Fri 11:12
:END:
#+begin_src emacs-lisp :tangle no
 (after! deft
     (setq
         deft-directory org-directory
         deft-recursive t
         deft-ignore-file-regexp org-file-exclude-regexp
         deft-strip-summary-regexp
         (concat "\\("
             "^:.+:.*\n" ; any line with a :SOMETHING:
             "\\|^#\\+.*\n" ; anyline starting with a #+
             "\\|^\\*.+.*\n" ; anyline where an asterisk starts the line
             "\\)"))
     (advice-add 'deft-parse-title :override
         (lambda (file contents)
          (if deft-use-filename-as-title
           (deft-base-filename file)
           (let* ((case-fold-search 't)
                  (begin (string-match "title: " contents))
                  (end-of-begin (match-end 0))
                  (end (string-match "\n" contents begin)))
            (if begin
                (substring contents end-of-begin end)
                (format "%s" file)))))))
#+end_src

*** TODO SQL
#+begin_src emacs-lisp :tangle packages.el
(package! sql-indent)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(add-hook 'sql-mode-hook 'lsp)
#+end_src
*** TODO Kotlin
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages 'org-babel-load-languages '((java . t)
                                                         (kotlin . t)))
#+end_src

** My_Tools
*** Mail
**** Packages
Install packages required by this module according to other modules and flags set
#+begin_src emacs-lisp :tangle modules/my_tools/mail/packages.el :lexical t
#+end_src
**** Checks
:PROPERTIES:
:header-args: :tangle modules/my_tools/mail/doctor.el :lexical t
:END:
Modules sanity checks run on ~doom doctor~
***** Mu Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "mu")
  (warn! "`mu` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src

***** Mbsync Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "mbsync")
  (warn! "`mbsync` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src
***** Msmtp Binary Dependency
#+begin_src emacs-lisp
(unless (executable-find "msmtp")
  (warn! "`msmtp` executable could not be found, Please install it and make sure it is on your PATH"))
#+end_src
**** Configuration
The bulk of the modules actual configuration
#+begin_src emacs-lisp :tangle modules/my_tools/mail/config.el
<<modules-my_tools-mail-config>>
<<modules-my_tools-mail-use-packages>>
<<modules-load_flags>>
#+end_src

***** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-my_tools-mail-use-packages
:END:
****** Mu4e
#+begin_src emacs-lisp :noweb yes
(use-package! mu4e
  :init
  <<mu4e-init>>
  <<mu4e-keymaps>>
  :config
  <<mu4e-config>>)
#+end_src
******* Init
:PROPERTIES:
header-args:      :noweb-ref mu4e-init
:END:
#+begin_src emacs-lisp
(setq mu4e-contexts
      (list
       (make-mu4e-context
        :name "gmail1"
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/gmail1" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "carson03henrich@gmail.com")
                (user-full-name . "Carson Henrich")
                (smtpmail-smtp-user "carson03henrich@gmail.com")
                (mu4e-drafts-folder . "/gmail1/Drafts")
                (mu4e-refile-folder . "/gmail1/Archive")
                (mu4e-sent-folder . "/gmail1/Sent")))
       (make-mu4e-context
        :name "gmail2"
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/gmail2" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "carson3henrich@gmail.com")
                (user-full-name . "Carson Henrich")
                (smtpmail-smtp-user "carson3henrich@gmail.com")
                (mu4e-drafts-folder . "/gmail2/Drafts")
                (mu4e-refile-folder . "/gmail2/Archive")
                (mu4e-sent-folder . "/gmail2/Sent")
                (mu4e-trash-folder . "/gmail2/Trash")))
       (make-mu4e-context
        :name "Western"
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/school" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "carson03henrich@gmail.com")
                (user-full-name . "Carson Henrich")
                (smtpmail-smtp-user "henricc5@wwu.edu")
                (mu4e-drafts-folder . "/school/Drafts")
                (mu4e-refile-folder . "/school/Archive")
                (mu4e-sent-folder . "/school/Sent")
                (mu4e-trash-folder . "/school/Trash")))))
#+end_src

******* Keymaps
:PROPERTIES:
header-args:      :noweb-ref mu4e-keymaps
:END:
#+begin_src emacs-lisp
#+end_src
******* Config
:PROPERTIES:
:header-args: :noweb-ref mu4e-config
:END:
Some general configuration
#+begin_src emacs-lisp
;; For rendering html email
(defun my-render-html-message ()
  (let ((dom (libxml-parse-html-region (point-min) (point-max))))
    (erase-buffer)
    (shr-insert-document dom)
    (goto-char (point-min))))

(setq mu4e-html2text-command 'my-render-html-message)

(setq
    mu4e-mu-binary (executable-find "mu")
    mu4e-maildir "~/.maildir"
    mu4e-get-mail-command (concat (executable-find "mbsync") " -a")
    mu4e-update-interval 300 ;; seconds
    mu4e-attachment-dir "~/Desktop"
    mu4e-change-filenames-when-moving 't
    mu4e-split-view 'horizontal
    mu4e-index-cleanup nil      ;; TODO don't do a full cleanup check
    mu4e-index-lazy-check t    ;; don't consider up-to-date dirs
    mu4e-user-mail-address-list '("carson03henrich@gmail.com" "carson3henrich@gmail.com" "henricc5@wwu.edu")
    mu4e-maildir-shortcuts '(("/gmail1/Inbox" . ?i)
                             ("/gmail1/Important" . ?j)
                             ("/gmail1/Sent" . ?s)
                             ("/gmail1/Drafts" . ?d)
                             ("/school/Inbox" . ?I)
                             ("/school/Important" . ?J)
                             ("/school/Sent" . ?S)
                             ("/school/Drafts" . ?D)))

(with-eval-after-load "mm-decode"
  (add-to-list 'mm-discouraged-alternatives "text/html")
  (add-to-list 'mm-discouraged-alternatives "text/richtext"))
#+end_src
******** Bookmarks
the following is to show shortcuts in the main view.

#+begin_src emacs-lisp
(setq mu4e-bookmarks
  '((:name "Unread messages"           :query "flag:unread AND NOT flag:trashed" :key 117)
    (:name "Today's messages"          :query "date:today..now"                  :key 116)
    (:name "Last 7 days"               :query "date:7d..now"                     :key 119
           :hide-unread t)
    (:name "Messages with images"      :query "mime:image/*"                     :key 112)
    (:name "Flagged messages"          :query"flag:flagged"                      :key 102)
    (:name "Inbox - Gmail (Primary)"   :query "maildir:/gmail1/Inbox"            :key ?g)
    (:name "Inbox - Gmail (Secondary)" :query "maildir:/gmail2/Inbox"            :key ?g)
    (:name "Inbox - Western"           :query "maildir:/school/Inbox"            :key ?w)))
#+end_src

******** Contexts
#+begin_src emacs-lisp

(setq mu4e-compose-context-policy 'ask)) ;; ask for context if no context matches;
#+end_src

******** Sending
#+begin_src emacs-lisp
;; gpg encryptiom & decryption:
;; this can be left alone
(require 'epa-file)
(epa-file-enable)
(setq epa-pinentry-mode 'loopback)
;; (auth-source-forget-all-cached)

;; don't keep message compose buffers around after sending:
(setq message-kill-buffer-on-exit t)

;; send function:
(setq send-mail-function 'sendmail-send-it
      message-send-mail-function 'sendmail-send-it
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-sendmail-f-is-evil t)

;; send program:
(setq sendmail-program (executable-find "msmtp"))

;; select the right sender email from the context.
(setq mail-specify-envelope-from t
      message-sendmail-envelope-from 'header
      mail-envelope-from 'header)

;; chose from account before sending
;; this is a custom function that works for me.
;; well I stole it somewhere long ago.
;; I suggest using it to make matters easy
;; of course adjust the email adresses and account descriptions
(defun timu/set-msmtp-account ()
  (if (message-mail-p)
      (save-excursion
        (let*
            ((from (save-restriction
                     (message-narrow-to-headers)
                     (message-fetch-field "from")))
             (account
              (cond
               ((string-match "carson03henrich@gmail.com" from) "gmail1")
               ((string-match "carson3henrich@gmail.com" from) "gmail2"))))
          (setq message-sendmail-extra-arguments (list '"-a" account))))))
;;(add-hook 'message-send-mail-hook 'timu/set-msmtp-account)

;; mu4e cc & bcc
;; this is custom as well
(add-hook 'mu4e-compose-mode-hook
          (defun timu/add-cc-and-bcc ()
            "My Function to automatically add Cc & Bcc: headers.
    This is in the mu4e compose mode."
            (save-excursion (message-add-header "Cc:\n"))
            (save-excursion (message-add-header "Bcc:\n"))))
;; mu4e address completion
(add-hook 'mu4e-compose-mode-hook 'company-mode)
#+end_src

******** Options
#+begin_src emacs-lisp
;; store link to message if in header view, not to header query:
(setq org-mu4e-link-query-in-headers-mode nil)

;; don't have to confirm when quitting:
(setq mu4e-confirm-quit nil)

;; number of visible headers in horizontal split view:
(setq mu4e-headers-visible-lines 20)

;; don't show threading by default:
;;(setq mu4e-headers-show-threads nil)

;; customize the reply-quote-string:
(setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")

;; M-x find-function RET message-citation-line-format for docs:
(setq message-citation-line-function 'message-insert-formatted-citation-line)
#+end_src
*** TODO Magit
*** TODO RSS
#+begin_src emacs-lisp :tangle config.el
(defun ime-elfeed-podcast-tagger (entry)
  (when (elfeed-entry-enclosures entry)
    (elfeed-tag entry 'media)))

(add-hook 'elfeed-new-entry-hook #'ime-elfeed-podcast-tagger)

(elfeed-org)
(after! org (setq rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory))))
#+end_src

*** TODO AI
**** Whisper
#+begin_src emacs-lisp :tangle yes
(after! whisper

  (defun rk/get-ffmpeg-device ()
    "Gets the list of devices available to ffmpeg.
The output of the ffmpeg command is pretty messy, e.g.
  [AVFoundation indev @ 0x7f867f004580] AVFoundation video devices:
  [AVFoundation indev @ 0x7f867f004580] [0] FaceTime HD Camera (Built-in)
  [AVFoundation indev @ 0x7f867f004580] AVFoundation audio devices:
  [AVFoundation indev @ 0x7f867f004580] [0] Cam Link 4K
  [AVFoundation indev @ 0x7f867f004580] [1] MacBook Pro Microphone
so we need to parse it to get the list of devices.
The return value contains two lists, one for video devices and one for audio devices.
Each list contains a list of cons cells, where the car is the device number and the cdr is the device name."
    (unless (string-equal system-type "darwin")
      (error "This function is currently only supported on macOS"))

    (let ((lines (string-split (shell-command-to-string "ffmpeg -list_devices true -f avfoundation -i dummy || true") "\n")))
      (cl-loop with at-video-devices = nil
               with at-audio-devices = nil
               with video-devices = nil
               with audio-devices = nil
               for line in lines
               when (string-match "AVFoundation video devices:" line)
               do (setq at-video-devices t
                        at-audio-devices nil)
               when (string-match "AVFoundation audio devices:" line)
               do (setq at-audio-devices t
                        at-video-devices nil)
               when (and at-video-devices
                         (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
               do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) video-devices)
               when (and at-audio-devices
                         (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
               do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) audio-devices)
               finally return (list (nreverse video-devices) (nreverse audio-devices)))))

 (defun rk/find-device-matching (string type)
   "Get the devices from `rk/get-ffmpeg-device' and look for a device
matching `STRING'. `TYPE' can be :video or :audio."
   (let* ((devices (rk/get-ffmpeg-device))
          (device-list (if (eq type :video)
                           (car devices)
                         (cadr devices))))
     (cl-loop for device in device-list
              when (string-match-p string (cdr device))
              return (car device))))

 (defcustom rk/default-audio-device nil
   "The default audio device to use for whisper.el and outher audio processes."
   :type 'string)

 (defun rk/select-default-audio-device (&optional device-name)
   "Interactively select an audio device to use for whisper.el and other audio processes.
If `DEVICE-NAME' is provided, it will be used instead of prompting the user."
   (interactive)
   (let* ((audio-devices (cadr (rk/get-ffmpeg-device)))
          (indexes (mapcar #'car audio-devices))
          (names (mapcar #'cdr audio-devices))
          (name (or device-name (completing-read "Select audio device: " names nil t))))
     (setq rk/default-audio-device (rk/find-device-matching name :audio))
     (when (boundp 'whisper--ffmpeg-input-device)
       (setq whisper--ffmpeg-input-device (format ":%s" rk/default-audio-device)))))

 (setq whisper-install-directory "/tmp/"
       whisper-model "base"
       whisper-language "en"
       whisper-translate nil
       whisper-use-threads (/ (num-processors) 2)))
#+end_src

**** Copilot
#+begin_src emacs-lisp :tangle yes
;; accept completion from copilot and fallback to corfu
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

*** TODO Jira
**** README
**** Configuration
** Editor
*** Meow
**** Packages
Install packages required by this module according to other modules and flags set
#+begin_src emacs-lisp :tangle modules/editor/meow/packages.el :noweb yes :lexical t
(package! meow)
#+end_src

**** Configuration
#+begin_src emacs-lisp :tangle modules/editor/meow/config.el :noweb yes :lexical t
<<modules-editor-meow-config>>
<<modules-editor-meow-use-packages>>
<<modules-load_flags>>
#+end_src

***** General Config
:PROPERTIES:
:header-args: :noweb-ref modules-editor-meow-config
:END:
****** Qwerty Keymaps
:PROPERTIES:
header-args:      :noweb-ref meow-keymaps
:END:
#+begin_src emacs-lisp
(defun meow-setup-qwerty ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
   #+end_src

***** Use Packages
:PROPERTIES:
:header-args: :noweb-ref modules-editor-meow-use-packages
:END:
****** Meow
#+begin_src emacs-lisp :noweb yes
(use-package! meow
  :hook (doom-after-modules-config . meow-global-mode)
  :demand t
  :config
  <<meow-config>>)
  #+end_src

******* Config
:PROPERTIES:
:header-args: :noweb-ref meow-config
:END:
#+begin_src emacs-lisp
(require 'meow)
(meow-setup-qwerty)
(meow-global-mode 1)
#+end_src
**** Flags
* Temporary Fixes
Here is a place where I can place /temporary/ fixes to bugs that have cropped up
while using my configuration. I say that they are temporary because they are
typically a less than ideal solution for when I don't feel like going and
actually fixing the problem.
*** Parinfer not building on x86 Macs
:PROPERTIES:
:CREATED:  [2024-07-22 Mon 19:37]
:END:
The library behind rust-parinfer recently had a change that caused it to stop
building for x86 macOS in the meantime I have built the library and placed it at
the path below.
#+begin_src emacs-lisp :tangle yes
(setq parinfer-rust-library "~/.config/doom/lib/libparinfer_rust.dylib.so")
#+end_src

* Packages
This is where packages not included in modules are placed to install them.
#+begin_src emacs-lisp :tangle packages.el
(package! leetcode)
(package! synosaurus)         ; thesuarus that doesn't get installed with lookup for some reason
(package! djvu)
(package! all-the-icons)
(package! nov)
(package! printing)
(package! spray
  :recipe (:host github :repo "emacsmirror/spray" :files ("*.el")))
(package! gptel)
(package! ellama)
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
(package! whisper
  :recipe (:host github :repo "natrys/whisper.el" :files ("*.el")))
#+end_src
* Configuration
** General
  #+begin_src emacs-lisp :tangle config.el :lexical t
(setq display-time-format "%Y-%m-%d %H:%M")

(setq auto-save-default t
      make-backup-files t)
(display-time-mode 1)
(auto-revert-mode 1)
(toggle-text-mode-auto-fill)

(require 'org-roam)
(require 'spray)
(require 'printing)
(toggle-frame-maximized)
#+end_src
*** User Information
  #+begin_src emacs-lisp :tangle config.el
(setq
        user-full-name "Carson Henrich"
        user-mail-address "carson03henrich@gmail.com")
#+end_src
** Functions
*** toggle auto-format
#+begin_src emacs-lisp :tangle config.el
(setq auto-format 'nil)
(defun my/toggle-auto-format ()
    (interactive)
    (if auto-format
        (progn (remove-hook! 'before-save-hook #'+format/buffer)
               (setq auto-format 'nil)
               (message "Auto-format Disabled"))
        (progn (add-hook! 'before-save-hook #'+format/buffer)
               (setq auto-format 't)
               (message "Auto-format Enabled"))))
#+end_src

#+RESULTS:
: my/toggle-auto-format

*** find-file-new-buffer
Useful for checking differences between file on disk and in buffer
puts
#+begin_src emacs-lisp :tangle config.el
(defun find-file-new-buffer (filename)
  "Very basic `find-file' which does not use a pre-existing buffer, and opens the new file read-only to prevent conflicts"
  (interactive "fFind file in new buffer: ")
  (let ((buf (create-file-buffer filename)))
    (with-current-buffer buf
      (insert-file-contents filename t)
      (read-only-mode))
    (pop-to-buffer-same-window buf)))
#+end_src

** Appearance
*** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'catppuccin)
#+end_src
*** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!
#+begin_src emacs-lisp :tangle config.el
;; Set reusable font name variables
(defvar my/fixed-width-font "Iosevka Nerd Font Mono"
  "The font to use for monospaced (fixed width) text.")

(defvar my/variable-width-font "Iosevka Aile"
  "The font to use for variable-pitch (document) text.")

(setq
    doom-unicode-font (font-spec :family my/fixed-width-font)
    doom-font (font-spec :family my/fixed-width-font :size 15 :weight 'light)
    doom-big-font (font-spec :family my/fixed-width-font :size 18 :weight 'light)
    doom-variable-pitch-font (font-spec :family my/variable-width-font :size 14 :weight 'light))
#+end_src
*** Syntax Highlighting
Need to set up treesitter such that it is used whenever it can be.
#+begin_src emacs-lisp :tangle config.el
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** Other
#+begin_src emacs-lisp :tangle config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Configure fill width
(setq visual-fill-column-center-text t)
(setq visual-fill-column-width 130)

;; Top breadcrumbs
(setq lsp-headerline-breadcrumb-enable 't)

;; Modeline
(setq mode-line-right-align-edge 'right-fringe)
(setq nerd-icons-scale-factor 1.0)
(setq doom-modeline-height 1)
#+end_src

** Keymaps
*** Evil
:PROPERTIES:
:header-args: :tangle evil-keymaps.el :lexical t
:END:

#+begin_src emacs-lisp :tangle config.el
(when (modulep! :editor evil)
  (load! "evil-keymaps"))
#+end_src

**** Global
***** Help
#+begin_src emacs-lisp
      (map!
        (:after help :map help-mode-map
                :n "o"       #'link-hint-open-link)
        (:after helpful :map helpful-mode-map
                :n "o"       #'link-hint-open-link)
        (:after info :map Info-mode-map
                :n "o"       #'link-hint-open-link)
        (:after geiser-doc :map geiser-doc-mode-map
                :n "o"       #'link-hint-open-link)
        (:after apropos :map apropos-mode-map
                :n "o"       #'link-hint-open-link
                :n "TAB"     #'forward-button
                :n [tab]     #'forward-button
                :n [backtab] #'backward-button)
        (:after view :map view-mode-map
                [escape]  #'View-quit-all)
        (:after man :map Man-mode-map
                :n "q"    #'kill-current-buffer))
#+end_src

***** Evil
#+begin_src emacs-lisp
(when (modulep! :editor evil +everywhere)
  ;; Minibuffer
  (map! :map (evil-ex-completion-map evil-ex-search-keymap)
        "C-a" #'evil-beginning-of-line
        "C-b" #'evil-backward-char
        "C-f" #'evil-forward-char
        :gi "C-j" #'next-complete-history-element
        :gi "C-k" #'previous-complete-history-element)

  (define-key! :keymaps +default-minibuffer-maps
    [escape] #'abort-recursive-edit
    "C-a"    #'move-beginning-of-line
    "C-r"    #'evil-paste-from-register
    "C-u"    #'evil-delete-back-to-indentation
    "C-v"    #'yank
    "C-w"    #'doom/delete-backward-word
    "C-z"    (cmd! (ignore-errors (call-interactively #'undo))))

  (define-key! :keymaps +default-minibuffer-maps
    "C-j"    #'next-line
    "C-k"    #'previous-line
    "C-S-j"  #'scroll-up-command
    "C-S-k"  #'scroll-down-command)
  ;; For folks with `evil-collection-setup-minibuffer' enabled
  (define-key! :states 'insert :keymaps +default-minibuffer-maps
    "C-j"    #'next-line
    "C-k"    #'previous-line)
  (define-key! read-expression-map
    "C-j" #'next-line-or-history-element
    "C-k" #'previous-line-or-history-element))

#+end_src

***** Smart Tab
#+begin_src emacs-lisp
;; Smart tab, these will only work in GUI Emacs
(map! :i [tab] (cmds! (and (modulep! :editor snippets)
                           (yas-maybe-expand-abbrev-key-filter 'yas-expand))
                      #'yas-expand
                      (and (bound-and-true-p company-mode)
                           (modulep! :completion company +tng))
                      #'company-indent-or-complete-common)
      :m [tab] (cmds! (and (modulep! :editor snippets)
                           (evil-visual-state-p)
                           (or (eq evil-visual-selection 'line)
                               (not (memq (char-after) (list ?\( ?\[ ?\{ ?\} ?\] ?\))))))
                      #'yas-insert-snippet
                      (and (modulep! :editor fold)
                           (save-excursion (end-of-line) (invisible-p (point))))
                      #'+fold/toggle
                      ;; Fixes #4548: without this, this tab keybind overrides
                      ;; mode-local ones for modes that don't have an evil
                      ;; keybinding scheme or users who don't have :editor (evil
                      ;; +everywhere) enabled.
                      (or (doom-lookup-key
                           [tab]
                           (list (evil-get-auxiliary-keymap (current-local-map) evil-state)
                                 (current-local-map)))
                          (doom-lookup-key
                           (kbd "TAB")
                           (list (evil-get-auxiliary-keymap (current-local-map) evil-state)))
                          (doom-lookup-key (kbd "TAB") (list (current-local-map))))
                      it
                      (fboundp 'evil-jump-item)
                      #'evil-jump-item))
#+end_src

**** Navigation
***** Windows
#+begin_src emacs-lisp
(map! :leader :prefix ("w" . "windows")
        :desc "Delete other windows" :n "o" #'delete-other-windows)
#+end_src

***** Workspaces
#+begin_src emacs-lisp
(map! (:when (modulep! :ui workspaces)
        :n "C-t"   #'+workspace/new
        :n "C-S-t" #'+workspace/display
        :g "M-1"   #'+workspace/switch-to-0
        :g "M-2"   #'+workspace/switch-to-1
        :g "M-3"   #'+workspace/switch-to-2
        :g "M-4"   #'+workspace/switch-to-3
        :g "M-5"   #'+workspace/switch-to-4
        :g "M-6"   #'+workspace/switch-to-5
        :g "M-7"   #'+workspace/switch-to-6
        :g "M-8"   #'+workspace/switch-to-7
        :g "M-9"   #'+workspace/switch-to-8
        :g "M-0"   #'+workspace/switch-to-final
        (:when IS-MAC
            :g "s-t"   #'+workspace/new
            :g "s-T"   #'+workspace/display
            :n "s-1"   #'+workspace/switch-to-0
            :n "s-2"   #'+workspace/switch-to-1
            :n "s-3"   #'+workspace/switch-to-2
            :n "s-4"   #'+workspace/switch-to-3
            :n "s-5"   #'+workspace/switch-to-4
            :n "s-6"   #'+workspace/switch-to-5
            :n "s-7"   #'+workspace/switch-to-6
            :n "s-8"   #'+workspace/switch-to-7
            :n "s-9"   #'+workspace/switch-to-8
            :n "s-0"   #'+workspace/switch-to-final)
;;; <leader> TAB --- workspace
        (:leader :prefix ("TAB" . "workspace")
            :desc "Display tab bar"           "TAB" #'+workspace/display
            :desc "Switch workspace"          "."   #'+workspace/switch-to
            :desc "Switch to last workspace"  "`"   #'+workspace/other
            :desc "New workspace"             "n"   #'+workspace/new
            :desc "New named workspace"       "N"   #'+workspace/new-named
            :desc "Load workspace from file"  "l"   #'+workspace/load
            :desc "Save workspace to file"    "s"   #'+workspace/save
            :desc "Delete session"            "x"   #'+workspace/kill-session
            :desc "Delete this workspace"     "d"   #'+workspace/delete
            :desc "Rename workspace"          "r"   #'+workspace/rename
            :desc "Restore last session"      "R"   #'+workspace/restore-last-session
            :desc "Next workspace"            "]"   #'+workspace/switch-right
            :desc "Previous workspace"        "["   #'+workspace/switch-left
            :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
            :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
            :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
            :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
            :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
            :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
            :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
            :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
            :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
            :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final)))
#+end_src

***** Buffers
#+begin_src emacs-lisp
      ;;; <leader> b --- buffer
(map! (:leader :prefix ("b" . "buffer")
       :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
       :desc "Previous buffer"             "["   #'previous-buffer
       :desc "Next buffer"                 "]"   #'next-buffer
       :desc "Clone buffer"                "c"   #'clone-indirect-buffer
       :desc "Clone buffer other window"   "C"   #'clone-indirect-buffer-other-window
       :desc "Kill buffer"                 "d"   #'kill-current-buffer
       :desc "Diff buffer with File"       "D"   #'diff-buffer-with-file
       :desc "ibuffer"                     "i"   #'ibuffer
       :desc "Kill buffer"                 "k"   #'kill-current-buffer
       :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
       :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
       :desc "Set bookmark"                "m"   #'bookmark-set
       :desc "Delete bookmark"             "M"   #'bookmark-delete
       :desc "Next buffer"                 "n"   #'next-buffer
       :desc "New empty buffer"            "N"   #'evil-buffer-new
       :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
       :desc "Previous buffer"             "p"   #'previous-buffer
       :desc "Revert buffer"               "r"   #'revert-buffer
       :desc "Rename buffer"               "R"   #'rename-buffer
       :desc "Save buffer"                 "s"   #'basic-save-buffer
       :desc "Save all buffers"            "S"   #'evil-write-all
       :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
       :desc "Yank buffer"                 "y"   #'+default/yank-buffer-contents
       :desc "Bury buffer"                 "z"   #'bury-buffer
       :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers
       (:when (modulep! :ui workspaces)
           :desc "Switch workspace buffer"    "b"   #'persp-switch-to-buffer
           :desc "Switch buffer"              "B"   #'switch-to-buffer
           :desc "ibuffer workspace"          "I"   #'+ibuffer/open-for-current-workspace)
       (:unless (modulep! :ui workspaces)
           :desc "Switch buffer"              "b"   #'switch-to-buffer)))
#+end_src

***** Files
#+begin_src emacs-lisp
      ;;; <leader> f --- file
(map! (:leader :prefix ("f" . "file")
    :desc "Create File"                 "c"   #'dired-create-empty-file
    :desc "Copy this file"              "C"   #'doom/copy-this-file
    :desc "Find directory"              "d"   #'+default/dired
    :desc "Delete this file"            "D"   #'doom/delete-this-file
    :desc "Find file in emacs.d"        "e"   #'doom/find-file-in-emacsd
    :desc "Browse emacs.d"              "E"   #'doom/browse-in-emacsd
    :desc "Find file"                   "f"   #'find-file
    :desc "Find file from here"         "F"   #'+default/find-file-under-here
    :desc "Locate file"                 "l"   #'locate
    :desc "Find file in private config" "P"   #'doom/find-file-in-private-config
    :desc "Browse private config"       "p"   #'doom/open-private-config
    :desc "Recent files"                "r"   #'recentf-open-files
    :desc "Rename/move this file"       "R"   #'doom/move-this-file
    :desc "Rename/move file"            "m"   #'rename-file
    :desc "Save file"                   "s"   #'save-buffer
    :desc "Save file as..."             "S"   #'write-file
    :desc "Sudo find file"              "u"   #'doom/sudo-find-file
    :desc "Sudo this file"              "U"   #'doom/sudo-this-file
    :desc "Yank file path"              "y"   #'+default/yank-buffer-path
    :desc "Yank file path from project" "Y"   #'+default/yank-buffer-path-relative-to-project))
#+end_src

***** Projects
#+begin_src emacs-lisp
      ;;; <leader> p --- project
(map! (:leader :prefix ("p" . "project")
       :desc "Browse project"               "." #'+default/browse-project
       :desc "Browse other project"         ">" #'doom/browse-in-other-project
       :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
       :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
       :desc "Add new project"              "a" #'projectile-add-known-project
       :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
       :desc "Compile in project"           "c" #'projectile-compile-project
       :desc "Repeat last command"          "C" #'projectile-repeat-last-command
       :desc "Remove known project"         "d" #'projectile-remove-known-project
       :desc "Discover projects in folder"  "D" #'+default/discover-projects
       :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
       :desc "Find file in project"         "f" #'projectile-find-file
       :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
       :desc "Configure project"            "g" #'projectile-configure-project
       :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
       :desc "Kill project buffers"         "k" #'projectile-kill-buffers
       :desc "Find other file"              "o" #'projectile-find-other-file
       :desc "Switch project"               "p" #'projectile-switch-project
       :desc "Find recent project files"    "r" #'projectile-recentf
       :desc "Run project"                  "R" #'projectile-run-project
       :desc "Save project files"           "s" #'projectile-save-project-buffers
       :desc "List project todos"           "t" #'magit-todos-list
       :desc "Test project"                 "T" #'projectile-test-project
       :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
       :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
       (:when (modulep! :lang org)
          :desc "Project-local Capture"        :n "n" #'org-capture)
       (:when (and (modulep! :tools taskrunner)
                   (or (modulep! :completion ivy)
                       (modulep! :completion helm)))
        :desc "List project tasks"          "z" #'+taskrunner/project-tasks)))
#+end_src

**** Completion
#+begin_src emacs-lisp
(map! (:when (modulep! :completion company)
        :i "C-@"    (cmds! (not (minibufferp)) #'company-complete-common)
        :i "C-SPC"  (cmds! (not (minibufferp)) #'company-complete-common)
        (:after company
                (:map company-active-map
                    "C-w"     nil  ; don't interfere with `evil-delete-backward-word'
                    "C-n"     #'company-select-next
                    "C-p"     #'company-select-previous
                    "C-j"     #'company-select-next
                    "C-k"     #'company-select-previous
                    "C-h"     #'company-show-doc-buffer
                    "C-u"     #'company-previous-page
                    "C-d"     #'company-next-page
                    "C-s"     #'company-filter-candidates
                    "C-S-s"   #'+company/completing-read
                    "C-SPC"   #'company-complete-common
                    "TAB"     #'company-complete-common-or-cycle
                    [tab]     #'company-complete-common-or-cycle
                    [backtab] #'company-select-previous
                    [f1]      nil)
                (:map company-search-map  ; applies to `company-filter-map' too
                    "C-n"     #'company-select-next-or-abort
                    "C-p"     #'company-select-previous-or-abort
                    "C-j"     #'company-select-next-or-abort
                    "C-k"     #'company-select-previous-or-abort
                    "C-s"     #'company-filter-candidates
                    [escape]  #'company-search-abort)))
      (:when (modulep! :completion ivy)
        (:after ivy
            :map ivy-minibuffer-map
            "C-SPC" #'ivy-call-and-recenter  ; preview file
            "C-l"   #'ivy-alt-done
            "C-v"   #'yank)
        (:after counsel
            :map counsel-ag-map
            "C-SPC"    #'ivy-call-and-recenter ; preview
            "C-l"      #'ivy-done
            [C-return] #'+ivy/git-grep-other-window-action))

      (:when (modulep! :completion helm)
        (:after helm :map helm-map
            [remap next-line]     #'helm-next-line
            [remap previous-line] #'helm-previous-line
            [left]     #'left-char
            [right]    #'right-char
            "C-S-f"    #'helm-previous-page
            "C-S-n"    #'helm-next-source
            "C-S-p"    #'helm-previous-source
            (:when (modulep! :editor evil +everywhere)
             "C-j"    #'helm-next-line
             "C-k"    #'helm-previous-line
             "C-S-j"  #'helm-next-source
             "C-S-k"  #'helm-previous-source)
            "C-u"      #'helm-delete-minibuffer-contents
            "C-s"      #'helm-minibuffer-history
            ;; Swap TAB and C-z
            "TAB"      #'helm-execute-persistent-action
            [tab]      #'helm-execute-persistent-action
            "C-z"      #'helm-select-action)
        (:after helm-ag :map helm-ag-map
            "C--"      #'+helm-do-ag-decrease-context
            "C-="      #'+helm-do-ag-increase-context
            [left]     nil
            [right]    nil)
        (:after helm-files :map (helm-find-files-map helm-read-file-map)
            [C-return] #'helm-ff-run-switch-other-window
            "C-w"      #'helm-find-files-up-one-level
            (:when (modulep! :editor evil +everywhere)
                "C-h"    #'helm-find-files-up-one-level
                "C-l"    #'helm-execute-persistent-action))
        (:after helm-locate :map helm-generic-files-map
            [C-return] #'helm-ff-run-switch-other-window)
        (:after helm-buffers :map helm-buffer-map
            [C-return] #'helm-buffer-switch-other-window)
        (:after helm-occur :map helm-occur-map
            [C-return] #'helm-occur-run-goto-line-ow)
        (:after helm-grep :map helm-grep-map
            [C-return] #'helm-grep-run-other-window-action)))
#+end_src

**** UI
#+begin_src emacs-lisp
(map!
        ;; misc
        :n "C-S-f"  #'toggle-frame-fullscreen
        :n "C-+"    #'doom/reset-font-size
        ;; Buffer-local font resizing
        :n "C-="    #'text-scale-increase
        :n "C--"    #'text-scale-decrease
        ;; Frame-local font resizing
        :n "M-C-="  #'doom/increase-font-size
        :n "M-C--"  #'doom/decrease-font-size
        (:when (modulep! :ui popup)
                "C-` "   #'+popup/toggle
                :leader :prefix ("-" "Popup")
                "-"   #'+popup/toggle
                "k"   #'+popup/raise
                "j"   #'+popup/buffer
                "d"   #'+popup/close
                "D"   #'+popup/close-all
                "r"   #'+popup/restore
                "o" #'+popup/other)

    (:leader :prefix ("t" . "Toggle")
        :desc "Big mode"                     "b" #'doom-big-font-mode
        (:after corfu
        :desc "Completion"                   "<tab>" #'global-corfu-mode)
        :desc "Fill Column Indicator"        "i" #'global-display-fill-column-indicator-mode
        :desc "Flymake"                      "S" #'flymake-mode
        :desc "Toggle Cursor"                "c" #'my/org-present-toggle-cursor
        :desc "Toggle Centered"              "C" #'visual-fill-column-mode
        :desc "Auto Format"                  "f" #'my/toggle-auto-format
        :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
        :desc "Evil goggles"                 "g" #'evil-goggles-mode
        :desc "Indent style"                 "I" #'doom/toggle-indent-style
        :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
        :desc "Read-only mode"               "r" #'read-only-mode
        :desc "Visible mode"                 "v" #'visible-mode
        :desc "Soft wrapping"                "w" #'global-visual-line-mode
        :desc "Soft wrapping (buffer)"       "W" #'visual-line-mode
        :desc "Autosave"                     "a" #'auto-save-visited-mode
        :desc "Autosave (buffer)"            "A" #'auto-save-mode
        :desc "Hard wrapping"                "h" #'toggle-text-mode-auto-fill
        :desc "Hard wrapping (buffer)"       "H" #'auto-fill-mode
        :desc "org-present mode"             "p" #'org-present
        (:when (modulep! :lang latex +cdlatex)
            :desc "Latex mode"                 "L" #'org-cdlatex-mode)
        (:when (and (modulep! :checkers syntax) (not (modulep! :checkers syntax +flymake)))
            :desc "Flycheck"                   "f" #'flycheck-mode)
        (:when (modulep! :ui indent-guides)
            :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
        (:when (modulep! :ui minimap)
            :desc "Minimap"                      "m" #'minimap-mode)
        (:when (and (modulep! :checkers spell) (not (modulep! :checkers spell +flyspell)))
            :desc "Spell checker"              "s" #'spell-fu-mode)
        (:when (modulep! :checkers spell +flyspell)
            :desc "Spell checker"              "s" #'flyspell-mode)
        (:when (modulep! :lang org +pomodoro)
            :desc "Pomodoro timer"             "t" #'org-pomodoro)
        (:when (modulep! :editor word-wrap)
            :desc "Fill Column Indicator"               "C" #'global-display-fill-column-indicator-mode
            :desc "Wrap at Fill-column"                 "c" '(lambda () (interactive)(if (eq +word-wrap-fill-style 'auto) (setq +word-wrap-fill-style 'nil)(setq +word-wrap-fill-style 'auto)))
            :desc "Soft wrapping"                       "w" #'+global-word-wrap-mode
            :desc "Soft wrapping (buffer)"              "W" #'+word-wrap-mode)
        (:when (modulep! :ui zen)
            :desc "Zen mode"                   "z" #'+zen/toggle
            :desc "Zen mode (fullscreen)"      "Z" #'+zen/toggle-fullscreen)))
#+end_src

**** Editor
#+begin_src emacs-lisp
(map!
 (:when (modulep! :editor format)
  :n "gQ" #'+format:region
  :n "zC" #'+fold/close-all
  :n "zO" #'+fold/open-all
  :n "zr" #'vimish-fold-unfold-all
  :n "zm" #'vimish-fold-refold-all
  :n "zA" #'vimish-fold-toggle-all
  :n "gy" #'yank-from-kill-ring)

 (:when (modulep! :editor rotate-text)
  :n "]r"  #'rotate-text
  :n "[r"  #'rotate-text-backward)

 (:when (modulep! :editor snippets)
  ;; auto-yasnippet
  :i  [C-tab] #'aya-expand
  :nv [C-tab] #'aya-create))
#+end_src
***** Multi-Cursors
#+begin_src emacs-lisp
(map! (:when (modulep! :editor multiple-cursors)
       ;; evil-multiedit
       :v  "R"               #'evil-multiedit-match-all
       :n  "M-d"              #'evil-multiedit-match-symbol-and-next
       :n  "M-D"              #'evil-multiedit-match-symbol-and-prev
       :v  "M-d"              #'evil-multiedit-match-and-next
       :v  "M-D"              #'evil-multiedit-match-and-prev
       :nv "C-M-d"            #'evil-multiedit-restore
       (:after evil-multiedit
        :map evil-multiedit-mode-map
        :nv "M-d"             #'evil-multiedit-match-and-next
        :nv "M-D"             #'evil-multiedit-match-and-prev
        [return]              #'evil-multiedit-toggle-or-restrict-region)
       (:prefix "gz"
        :nv "d"               #'evil-mc-make-and-goto-next-match
        :nv "D"               #'evil-mc-make-and-goto-prev-match
        :nv "s"               #'evil-mc-skip-and-goto-next-match
        :nv "S"               #'evil-mc-skip-and-goto-prev-match
        :nv "c"               #'evil-mc-skip-and-goto-next-cursor
        :nv "C"               #'evil-mc-skip-and-goto-prev-cursor
        :nv "j"               #'evil-mc-make-cursor-move-next-line
        :nv "k"               #'evil-mc-make-cursor-move-prev-line
        :nv "m"               #'evil-mc-make-all-cursors
        :nv "n"               #'evil-mc-make-and-goto-next-cursor
        :nv "N"               #'evil-mc-make-and-goto-last-cursor
        :nv "p"               #'evil-mc-make-and-goto-prev-cursor
        :nv "P"               #'evil-mc-make-and-goto-first-cursor
        :nv "q"               #'evil-mc-undo-all-cursors
        :nv "t"               #'+multiple-cursors/evil-mc-toggle-cursors
        :nv "u"               #'+multiple-cursors/evil-mc-undo-cursor
        :nv "z"               #'+multiple-cursors/evil-mc-toggle-cursor-here
        :v  "I"               #'evil-mc-make-cursor-in-visual-selection-beg
        :v  "A"               #'evil-mc-make-cursor-in-visual-selection-end)))
#+end_src

**** Tools
#+begin_src emacs-lisp
;;; <leader> l --- live share/collab
;;; TODO Do you like this location for this map? This was the best idea we
;;; could come up with, but we're happy to move it if there's a better
;;; place! Also not sure if we're allowed to say "live share" since that's
;;; a blatant ripoff of VS Code's name for this feature
(map!
 (:after printing (:desc "Print" "s-p"   #'pr-interface))
 (:when (modulep! :tools collab) (:prefix ("l" . "live share/collab")
                                  :desc "Switch to a shared buffer"      "b"   #'crdt-switch-to-buffer
                                  :desc "Connect to a session"           "c"   #'crdt-connect
                                  :desc "Disconnect from session"        "d"   #'crdt-disconnect
                                  :desc "Toggle following user's cursor" "f"   #'crdt-follow-user
                                  :desc "Stop following user if any"     "F"   #'crdt-stop-follow
                                  :desc "Goto another user's cursor"     "g"   #'crdt-goto-user
                                  :desc "List shared buffers"            "i"   #'crdt-list-buffers
                                  :desc "Kick a user (host only)"        "k"   #'crdt-kill-user
                                  :desc "List sessions"                  "l"   #'crdt-list-sessions
                                  :desc "Share current buffer"           "s"   #'crdt-share-buffer
                                  :desc "Stop sharing current buffer"    "S"   #'crdt-stop-share-buffer
                                  :desc "List connected users"           "u"   #'crdt-list-users
                                  :desc "Stop a session (host only)"     "x"   #'crdt-stop-session
                                  :desc "Copy URL of current session"    "y"   #'crdt-copy-url
                                  :desc "Goto next user's cursor"        "]"   #'crdt-goto-next-user
                                  :desc "Goto previous user's cursor"    "["   #'crdt-goto-prev-user))

(:map sql-mode-map
 :localleader
 :desc "SQL Connect to REPL"             "m" #'sql-connect
 :desc "Set SQL Product"                 "M" #'sql-set-product
 :desc "Execute Paragraph"               "p" #'lsp-sql-execute-paragraph
 :desc "Send Paragraph to REPL"          "P" #'sql-send-paragraph
 :desc "Send Buffer to REPL"             "b" #'sql-send-buffer
 :desc "Send String to REPL"             "q" #'sql-send-string
 :desc "Execute Region or Buffer"        "r" #'lsp-sql-execute-query
 :desc "Send Region to REPL"          :v "R" #'sql-send-region
 :desc "Toggle Goto After Send"          "t" #'sql-toggle-pop-to-buffer-after-send-region
 :desc "Switch Connection"               "c" #'lsp-sql-switch-connection
 :desc "Show Connections"                "C" #'lsp-sql-show-connections
 :desc "Switch Database"                 "d" #'lsp-sql-switch-database
 :desc "Show Databases"                  "D" #'lsp-sql-show-databases
 :desc "List Table"                      "l" #'sql-list-table
 :desc "List All"                        "L" #'sql-list-all)


   ;;; <leader> o --- open
 (:leader :prefix ("o" . "open")
  :desc "Default browser"    "b"  #'browse-url-of-file
  :desc "Start debugger"     "d"  #'+debugger/start
  :desc "New frame"          "w"  #'make-frame
  :desc "GPT"                "g"  #'gptel
  :desc "Select frame"       "W"  #'select-frame-by-name
  :desc "REPL"               "r"  #'+eval/open-repl-other-window
  :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
  :desc "Dired"              "-"  #'dired-jump
  :desc "Calc"              "c"  #'calc
  :desc "Org agenda"       "A"  #'org-agenda

  (:prefix ("a" . "org agenda2000")
   :desc "Agenda"         "a"  #'org-agenda
   :desc "Todo list"      "t"  #'org-todo-list
   :desc "Tags search"    "m"  #'org-tags-view
   :desc "View search"    "v"  #'org-search-view)

  (:when (modulep! :tools pass)
    :desc "Pass"           "k" #'pass)

  (:when (modulep! :ui neotree)
    :desc "Project sidebar"              "p" #'+neotree/open
    :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)

  (:when (modulep! :ui treemacs)
    :desc "Project sidebar" "p" #'+treemacs/toggle
    :desc "Find file in project sidebar" "P" #'treemacs-find-file)

  (:when (modulep! :term shell)
    :desc "Toggle shell popup"    "t" #'+shell/toggle
    :desc "Open shell here"       "T" #'+shell/here)

  (:when (modulep! :term term)
    :desc "Toggle terminal popup" "t" #'+term/toggle
    :desc "Open terminal here"    "T" #'+term/here)

  (:when (modulep! :term vterm)
    :desc "Toggle vterm popup"    "t" #'+vterm/toggle
    :desc "Open vterm here"       "T" #'+vterm/here)

  (:when (modulep! :term eshell)
    :desc "Toggle eshell popup"   "e" #'+eshell/toggle
    :desc "Open eshell here"      "E" #'+eshell/here)

  (:when (modulep! :os macos)
    :desc "Reveal in Finder"           "o" #'+macos/reveal-in-finder
    :desc "Reveal project in Finder"   "O" #'+macos/reveal-project-in-finder)

  (:when (modulep! :tools docker)
    :desc "Docker" "D" #'docker)

  (:when (modulep! :app calendar)
    :desc "Calendar" "C" #'=calendar)

  (:when (modulep! :app irc)
    :desc "IRC" "i" #'=irc)

  (:when (modulep! :app rss)
    :desc "RSS" "f" #'=rss)

  (:when (modulep! :email mu4e)
    :desc "Mu4e" "m" #'=mu4e
    :desc "Mu4e Compose" "M" #'+mu4e/compose)

  (:when (modulep! :email notmuch)
    :desc "notmuch" "m" #'=notmuch)

  (:after spray
   :desc "Spray" "s" #'spray-mode)

  (:when (modulep! :email wanderlust)
    :desc "wanderlust" "m" #'=wanderlust)))

(map! :leader
      :prefix ("l"."Language Models")
      (:after (fboundp 'copilot-mode)
       :desc "Complete" "<tab>" #'copilot-mode)
      (:when (fboundp 'whisper-run)
        :desc "Whisper" "w" #'whisper-run)
      (:when (fboundp 'ellama-chat)
        :desc "Chat" "e" #'ellama-chat
        :desc "Change" "C" #'ellama-change
        :desc "Provider Selection" "p" #'ellama-provider-select
        :desc "Define Word" "d" #'ellama-define-word
        :desc "Send Region/Buffer to chat" :nv "E" #'ellama-ask-selection
        :desc "Ask About Region/Buffer"   :nv "a" #'ellama-ask-about
        :desc "Summarize Region/Buffer"   :nv "S" #'ellama-summarize
        (:prefix ("s" . "session")
         :desc "Switch" "s" #'ellama-session-switch
         :desc "Load" "l" #'ellama-load-session
         :desc "Remove" "R" #'ellama-session-remove
         :desc "Rename" "r" #'ellama-session-rename)
        (:prefix ("i" . "improve")
         :desc "Grammar" "g" #'ellama-improve-grammar
         :desc "Wording" "w" #'ellama-improve-wording
         :desc "Conciseness" "c" #'ellama-improve-conciseness)
        (:prefix ("c" . "code")
         :desc "Complete" "<tab>" #'ellama-code-complete
         :desc "Improve" "i" #'ellama-code-improve
         :desc "Review" "r" #'ellama-code-review
         :desc "Edit" "e" #'ellama-code-edit
         :desc "Add" "a" #'ellama-code-add)))

   ;;; <leader> r --- remote
(map! (:when (modulep! :tools upload) (:leader :prefix ("r" . "remote")
                                       :desc "Browse remote"              "b" #'ssh-deploy-browse-remote-base-handler
                                       :desc "Browse relative"            "B" #'ssh-deploy-browse-remote-handler
                                       :desc "Download remote"            "d" #'ssh-deploy-download-handler
                                       :desc "Delete local & remote"      "D" #'ssh-deploy-delete-handler
                                       :desc "Eshell base terminal"       "e" #'ssh-deploy-remote-terminal-eshell-base-handler
                                       :desc "Eshell relative terminal"   "E" #'ssh-deploy-remote-terminal-eshell-handler
                                       :desc "Move/rename local & remote" "m" #'ssh-deploy-rename-handler
                                       :desc "Open this file on remote"   "o" #'ssh-deploy-open-remote-file-handler
                                       :desc "Run deploy script"          "s" #'ssh-deploy-run-deploy-script-handler
                                       :desc "Upload local"               "u" #'ssh-deploy-upload-handler
                                       :desc "Upload local (force)"       "U" #'ssh-deploy-upload-handler-forced
                                       :desc "Diff local & remote"        "x" #'ssh-deploy-diff-handler
                                       :desc "Browse remote files"        "." #'ssh-deploy-browse-remote-handler
                                       :desc "Detect remote changes"      ">" #'ssh-deploy-remote-changes-handler))



   ;;; <leader> s --- search
      (:leader :prefix ("s" . "search")
       :desc "Search current directory"     "d" #'+default/search-cwd
       :desc "Search other directory"       "D" #'+default/search-other-cwd
       :desc "Search .emacs.d"              "e" #'+default/search-emacsd
       :desc "Locate file"                  "f" #'locate
       :desc "Jump to symbol"               "i" #'imenu
       :desc "Jump to visible link"         "l" #'link-hint-open-link
       :desc "Jump to link"                 "L" #'ffap-menu
       :desc "Jump list"                    "j" #'evil-show-jumps
       :desc "Jump to bookmark"             "m" #'bookmark-jump
       :desc "Look up online"               "o" #'+lookup/online
       :desc "Look up online (w/ prompt)"   "O" #'+lookup/online-select
       :desc "Look up in local docsets"     "k" #'+lookup/in-docsets
       :desc "Look up in all docsets"       "K" #'+lookup/in-all-docsets
       :desc "Search project"               "p" #'+default/search-project
       :desc "Search other project"         "P" #'+default/search-other-project
       :desc "Jump to mark"                 "r" #'evil-show-marks
       :desc "Search buffer"                "s" #'+default/search-buffer
       :desc "Dictionary"                   "t" #'+lookup/dictionary-definition
       :desc "Thesaurus"                    "T" #'+lookup/synonyms
       :desc "Search all open buffers"      "B"
       (cond ((modulep! :completion vertico)   (cmd!! #'consult-line-multi 'all-buffers))
             ((modulep! :completion ivy)       #'swiper-all)
             ((modulep! :completion helm)      #'swiper-all))
       :desc "Search buffer"                "b"
       (cond ((modulep! :completion vertico)   #'+default/search-buffer)
             ((modulep! :completion ivy)       #'swiper)
             ((modulep! :completion helm)      #'swiper))
       :desc "Jump to symbol in open buffers" "I"
       (cond ((modulep! :completion vertico)   #'consult-imenu-multi)
             ((modulep! :completion helm)      #'helm-imenu-in-all-buffers))
       :desc "Search buffer for thing at point" "S"
       (cond ((modulep! :completion vertico)   #'+vertico/search-symbol-at-point)
             ((modulep! :completion ivy)       #'swiper-isearch-thing-at-point)
             ((modulep! :completion helm)      #'swiper-isearch-thing-at-point))
       (:when (fboundp 'vundo)
         :desc "Undo history"               "u" #'vundo))


      (:when (modulep! :tools pdf)
        (:map pdf-view-mode-map
              (:localleader
               :desc "Center"                    "c" #'pdf-view-center-in-window
               :desc "Rotate"                    "r" #'pdf-view-rotate
               :desc "Recolor"                   "R" #'pdf-view-themed-minor-mode))))
#+end_src

**** Other
#+begin_src emacs-lisp
(map! :when (modulep! :tools eval) "M-r" #'+eval/buffer)
(map! :leader
      :desc "Eval expression"       ";"    #'pp-eval-expression
      :desc "M-x"                   ":"    #'execute-extended-command
      :desc "Pop up scratch buffer" "["    #'doom/open-scratch-buffer
      ;; C-u is used by evil
(:when (modulep! :editor evil)
      :desc "Universal argument"    "j"    #'universal-argument
      :desc "window"                "w"    evil-window-map)
      :desc "help"                  "h"    help-map
      :desc "Find file"             "."    #'find-file
      :desc "Switch buffer"         ","    #'switch-to-buffer
      :desc "Switch to last buffer" "`"    #'evil-switch-to-windows-last-buffer
      :desc "Search for symbol in project" "*" #'+default/search-project-for-symbol-at-point
      :desc "Search project"               "/" #'+default/search-project
      :desc "Find file in project"  "SPC"  #'projectile-find-file
      :desc "Jump to bookmark"      "RET"  #'bookmark-jump
      :desc "Resume last search"    "'"
      (cond ((modulep! :completion vertico)    #'vertico-repeat)
            ((modulep! :completion ivy)        #'ivy-resume)
            ((modulep! :completion helm)       #'helm-resume))
      (:when (modulep! :ui popup)
            :desc "Toggle last popup"     "~"    #'+popup/toggle)
      (:when (modulep! :ui workspaces)
            :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
            :desc "Switch buffer"           "<" #'switch-to-buffer)

    ;;; <leader> i --- insert
    (:prefix ("i" . "insert")
        :desc "Current file name"             "f"   #'+default/insert-file-path
        :desc "Current file path"             "F"   (cmd!! #'+default/insert-file-path t)
        :desc "Evil ex path"                  "p"   (cmd! (evil-ex "R!echo "))
        :desc "From evil register"            "r"   #'evil-show-registers
        :desc "Snippet"                       "s"   #'yas-insert-snippet
        :desc "Unicode"                       "u"   #'insert-char
        :desc "From clipboard"                "y"   #'+default/yank-pop)

      ;;; <leader> q --- quit/session
    (:prefix ("q" . "quit/session")
        :desc "Restart emacs server"         "d" #'+default/restart-server
        :desc "Delete frame"                 "f" #'delete-frame
        :desc "Clear current frame"          "F" #'doom/kill-all-buffers
        :desc "Kill Emacs (and daemon)"      "K" #'save-buffers-kill-emacs
        :desc "Quit Emacs"                   "q" #'save-buffers-kill-terminal
        :desc "Submit Emacs Everywhere"      "e" #'emacs-everywhere-finish
        :desc "Abort Emacs Everywhere"       "E" #'emacs-everywhere-abort
        :desc "Quit Emacs without saving"    "Q" #'evil-quit-all-with-error-code
        :desc "Quick save current session"   "s" #'doom/quicksave-session
        :desc "Restore last session"         "l" #'doom/quickload-session
        :desc "Save session to file"         "S" #'doom/save-session
        :desc "Restore session from file"    "L" #'doom/load-session
        :desc "Restart & restore Emacs"      "r" #'doom/restart-and-restore
        :desc "Restart Emacs"                "R" #'doom/restart))
#+end_src

#+RESULTS:
: doom/restart

**** Programming
***** Code
#+begin_src emacs-lisp
    (map! (:leader :prefix ("c" . "code")
            :desc "Compile"                               "c"   #'compile
            :desc "Recompile"                             "C"   #'recompile
            :desc "Jump to definition"                    "d"   #'+lookup/definition
            :desc "Jump to references"                    "D"   #'+lookup/references
            :desc "Evaluate buffer/region"                "e"   #'+eval/buffer-or-region
            :desc "Evaluate & replace region"             "E"   #'+eval:replace-region
            :desc "Format buffer/region"                  "f"   #'+format/region-or-buffer
            :desc "Find implementations"                  "i"   #'+lookup/implementations
            :desc "Jump to documentation"                 "k"   #'+lookup/documentation
            :desc "Send to repl"                          "S"   #'+eval/send-region-to-repl
            :desc "Find type definition"                  "t"   #'+lookup/type-definition
            :desc "Delete trailing whitespace"            "w"   #'delete-trailing-whitespace
            :desc "Delete trailing newlines"              "W"   #'doom/delete-trailing-newlines
            :desc "List errors"                           "x"   #'+default/diagnostics
           (:when (modulep! :lang org)
            :prefix ("T" "tangle")
            :desc "Detangle Code Blocks"                  "d"   #'org-babel-detangle
            :desc "Tangle Code Blocks"                    "t"   #'org-babel-tangle
            :desc "Tangle Code Blocks in File"            "f"   #'org-babel-tangle-file
            :desc "Tangle Clean"                          "c"   #'org-babel-tangle-clean)

           (:when (and (modulep! :tools lsp) (not (modulep! :tools lsp +eglot)))
            :desc "LSP Execute code action"               "a" #'lsp-execute-code-action
            :desc "LSP Organize imports"                  "o" #'lsp-organize-imports
            :desc "Show documentation in Minibuffer"      "k" #'lsp-describe-thing-at-point

                (:when (modulep! :completion ivy)
                    :desc "Jump to symbol in current workspace" "j"   #'lsp-ivy-workspace-symbol
                    :desc "Jump to symbol in any workspace"     "J"   #'lsp-ivy-global-workspace-symbol)
                (:when (modulep! :completion helm)
                    :desc "Jump to symbol in current workspace" "j"   #'helm-lsp-workspace-symbol
                    :desc "Jump to symbol in any workspace"     "J"   #'helm-lsp-global-workspace-symbol)
                (:when (modulep! :completion vertico)
                    :desc "Jump to symbol in current workspace" "j"   #'consult-lsp-symbols
                    :desc "Jump to symbol in any workspace"     "J"   (cmd!! #'consult-lsp-symbols 'all-workspaces))
                (:when (modulep! :ui treemacs +lsp)
                    :desc "Show LSP-UI imenu"                   "u"   #'lsp-ui-imenu
                    :desc "Errors list"                         "x"   #'lsp-treemacs-errors-list
                    :desc "Incoming call hierarchy"             "y"   #'lsp-treemacs-call-hierarchy
                    :desc "Outgoing call hierarchy"             "Y"   (cmd!! #'lsp-treemacs-call-hierarchy t)
                    :desc "References tree"                     "R"   (cmd!! #'lsp-treemacs-references t)
                    :desc "Symbols"                             "s"   #'lsp-treemacs-symbols
                    :desc "LSP"                                 "l"   #'+default/lsp-command-map
                    :desc "LSP Rename"                          "r"   #'lsp-rename))
           (:when (modulep! :tools lsp +eglot)
                :desc "LSP Execute code action" "a" #'eglot-code-actions
                :desc "LSP Rename" "r" #'eglot-rename
                :desc "LSP Find declaration"                 "j"   #'eglot-find-declaration
                (:when (modulep! :completion vertico)
                    :desc "Jump to symbol in current workspace" "j"   #'consult-eglot-symbols))))
#+end_src

***** Git
#+begin_src emacs-lisp
      ;;; <leader> g --- git/version control
  (map! :leader :prefix ("g" . "git")
       :desc "Revert file"                 "R"   #'vc-revert
       :desc "Copy link to remote"         "y"   #'+vc/browse-at-remote-kill
       :desc "Copy link to homepage"       "Y"   #'+vc/browse-at-remote-kill-homepage
       (:when (modulep! :ui hydra)
            :desc "SMerge"                    "m"   #'+vc/smerge-hydra/body)
       (:when (modulep! :ui vc-gutter)
            :desc "Revert hunk at point"      "r"   #'+vc-gutter/revert-hunk
            :desc "stage hunk at point"       "s"   #'+vc-gutter/stage-hunk
            :desc "Git time machine"          "t"   #'git-timemachine-toggle
            :desc "Jump to next hunk"         "]"   #'+vc-gutter/next-hunk
            :desc "Jump to previous hunk"     "["   #'+vc-gutter/previous-hunk
            (:when (modulep! :ui hydra)
                :desc "VCGutter"                "."   #'+vc/gutter-hydra/body))
       (:when (modulep! :tools magit)
            :desc "Magit dispatch"            "/"   #'magit-dispatch
            :desc "Magit file dispatch"       "."   #'magit-file-dispatch
            :desc "Forge dispatch"            "'"   #'forge-dispatch
            :desc "Magit switch branch"       "b"   #'magit-branch-checkout
            :desc "Magit status"              "g"   #'magit-status
            :desc "Magit status here"         "G"   #'magit-status-here
            :desc "Magit file delete"         "D"   #'magit-file-delete
            :desc "Magit blame"               "B"   #'magit-blame-addition
            :desc "Magit clone"               "C"   #'magit-clone
            :desc "Magit fetch"               "F"   #'magit-fetch
            :desc "Magit buffer log"          "L"   #'magit-log-buffer-file
            :desc "Git stage file"            "S"   #'magit-stage-file
            :desc "Git unstage file"          "U"   #'magit-unstage-file
            (:prefix ("f" . "find")
                :desc "Find file"                 "f"   #'magit-find-file
                :desc "Find gitconfig file"       "g"   #'magit-find-git-config-file
                :desc "Find commit"               "c"   #'magit-show-commit
                :desc "Find issue"                "i"   #'forge-visit-issue
                :desc "Find pull request"         "p"   #'forge-visit-pullreq)
            (:prefix ("o" . "open in browser")
                :desc "Browse file or region"     "o"   #'+vc/browse-at-remote
                :desc "Browse homepage"           "h"   #'+vc/browse-at-remote-homepage
                :desc "Browse remote"             "r"   #'forge-browse-remote
                :desc "Browse commit"             "c"   #'forge-browse-commit
                :desc "Browse an issue"           "i"   #'forge-browse-issue
                :desc "Browse a pull request"     "p"   #'forge-browse-pullreq
                :desc "Browse issues"             "I"   #'forge-browse-issues
                :desc "Browse pull requests"      "P"   #'forge-browse-pullreqs)
            (:prefix ("l" . "list")
                (:when (modulep! :tools gist)
                    :desc "List gists"              "g"   #'+gist:list)
                :desc "List repositories"         "r"   #'magit-list-repositories
                :desc "List submodules"           "s"   #'magit-list-submodules
                :desc "List issues"               "i"   #'forge-list-issues
                :desc "List pull requests"        "p"   #'forge-list-pullreqs
                :desc "List notifications"        "n"   #'forge-list-notifications)
            (:prefix ("c" . "create")
                :desc "Initialize repo"           "r"   #'magit-init
                :desc "Clone repo"                "R"   #'magit-clone
                :desc "Commit"                    "c"   #'magit-commit-create
                :desc "Fixup"                     "f"   #'magit-commit-fixup
                :desc "Branch"                    "b"   #'magit-branch-and-checkout
                :desc "Issue"                     "i"   #'forge-create-issue
                :desc "Pull request"              "p"   #'forge-create-pullreq)))
#+end_src
**** No Idea
#+begin_src emacs-lisp
(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:C-w\\|%s w\\) m\\'" prefix-re))
                  nil . "maximize")
                which-key-replacement-alist)))

,#+end_#+begin_src

,#+end_#+begin_src

#+end_src
*** Meow
:PROPERTIES:
:header-args: :tangle meow-keymaps.el :lexical t
:END:
#+begin_src emacs-lisp :tangle config.el
(when (modulep! :editor meow)
  (load! "meow-keymaps"))
#+end_src

**** Spaces
**** Windows
#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("w" . "windows")
      :desc "Focus Other" :n "h" #'other-window
      :desc "Split" :n "l" #'split-window
      :desc "Delete other windows" :n "o" #'delete-other-windows)
#+end_src

**** Projects
**** Apps
**** Notes
** Tools
*** Magit
#+begin_src emacs-lisp :tangle config.el
(setq-default with-editor-emacsclient-executable "emacsclient")
#+end_src

*** Vterm
#+begin_src emacs-lisp :tangle config.el
(setq vterm-shell "/etc/profiles/per-user/carsonhenrich/bin/fish")
#+end_src

*** Completion
#+begin_src emacs-lisp :tangle yes
(set-lookup-handlers! 'lsp-ui-doc-mode :documentation #'lsp-ui-doc-glance)
(after! corfu
   (setq corfu-preselect 'prompt)
   (add-hook 'completion-at-point-functions #'cape-file)
   (add-hook! org-mode (add-hook 'completion-at-point-functions #'cape-dict 0 't)))
#+end_src
*** Search
Add new search providers to the lookup list each entry has a name and a url with
a =%s= where the query will be expanded.
#+begin_src emacs-lisp :tangle config.el
(when (modulep! :lang nix)
  (setq +lookup-provider-url-alist (append +lookup-provider-url-alist '(
 ("Rust Crate Docs"  "https://docs.rs/releases/search?query=%s")
 ("Nix Options"  "https://search.nixos.org/options?type=options&query=%s")
 ("Nix Packages"  "https://search.nixos.org/packages?type=packages&query=%s")
 ("Noogle"  "https://noogle.dev/q?term=%s")
 ("Home-Manager Options"  "https://mipmip.github.io/home-manager-option-search/?query=%s")))))
#+end_src
*** Archive :ARCHIVE:
**** Leetcode
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:
#+begin_src emacs-lisp :tangle no
(setq leetcode-prefer-language "python3")
(setq leetcode-prefer-sql "mysql")
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/leetcode")
(add-hook 'leetcode-solution-mode-hook
          (lambda() (flycheck-mode -1)))
#+end_src
**** Khalel
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:
#+begin_src emacs-lisp :tangle no
(use-package! khalel
  :after org
  :config
  (khalel-add-capture-template))
(setq! khalel-import-org-file-header "
:PROPERTIES:
:ID:       58b06cd0-06cf-47c3-96d5-0d987c8c479d
:END:
,#+TITLE: Calendar

,#+COLUMNS: %ITEM %TIMESTAMP %LOCATION %CALENDAR

,*NOTE*: this file has been generated by [[elisp:(khalel-import-events)][khalel-import-events]] and /any changes to this document will be lost on the next import/!
Instead, use =khalel-edit-calendar-event= or =khal edit= to edit the underlying calendar entries, then re-import them here.

You can use [[elisp:(khalel-run-vdirsyncer)][khalel-run-vdirsyncer]] to synchronize with remote calendars.

Consider adding this file to your list of agenda files so that events show up there.
")

(setq khalel-khal-command (executable-find "khal"))
(setq khalel-capture-key "e")
(setq khalel-import-org-file (concat org-directory "/journal/calendar.org"))
(setq khalel-vdirsyncer-command (executable-find "vdirsyncer"))
(setq khalel-import-end-date "+90d")
(setq khalel-import-org-file-confirm-overwrite nil)

;; Integrate with email invitations
(require 'khalel-icalendar)
#+end_src

**** TODO Debugging
:PROPERTIES:
:ARCHIVE_TIME: 2024-07-17 Wed 17:43
:END:
